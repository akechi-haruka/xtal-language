#include "xtal.h"
#include "xtal_bind.h"
#include "xtal_macro.h"
#include "xtal_details.h"
#include "xtal_stringspace.h"
#include "xtal_parser.h"

namespace xtal{

namespace{

void Iterator_each(const VMachinePtr& vm){
	vm->return_result(vm->arg_this());
}

void Iterator_block_first(const VMachinePtr& vm){
	vm->arg_this()->rawsend(vm, Xid2(block_next));
}

void VMachine_current_context(const VMachinePtr& vm){
	vm->return_result(vm->current_context2());
}

const AnyPtr& Any_p(const AnyPtr& v){
	stdout_stream()->println(v);
	return v;
}

StringPtr Any_to_s(const AnyPtr& v){
	return Xf1("<%s>", 0, v->object_name());
}

bool Any_op_in_Array(const AnyPtr& v, const ArrayPtr& values){
	const VMachinePtr& vm = vmachine();
	Xfor(n, values){
		if(XTAL_detail_raweq(n, v)){
			return true;
		}

		vm->setup_call(1);
		vm->push_arg(v);
		n->rawsend(vm, Xid2(op_eq));
		if(vm->is_executed() && vm->result()){
			vm->cleanup_call();
			return true;
		}
		vm->cleanup_call();
	}

	return false;
}

bool Any_op_in_Set(const AnyPtr& v, const MapPtr& values){
	return !!values->at(v);
}

void Any_this(const VMachinePtr& vm){
	vm->return_result(vm->arg_this());
}

void Stream_put_s(const StreamPtr& stream, const StringPtr& str){
	stream->put_s(str);
}

StringPtr String_format(const StringPtr& str){
	return format(str);
}

TextPtr String_text(const StringPtr& str){
	return text(str);
}

const AnyPtr& Array_op_at(const ArrayPtr& a, int_t n){
	return a->op_at(n);
}

void Array_op_set_at(const ArrayPtr& a, int_t n, const AnyPtr& v){
	return a->op_set_at(n, v);
}

void builtin_print(const AnyPtr& str){
	stdout_stream()->print(str);
}

void builtin_println(const AnyPtr& str){
	stdout_stream()->println(str);
}

void builtin_printf(const StringPtr& format_string, const ArgumentsPtr& args){
	stdout_stream()->printf(format_string, args);
}

AnyPtr builtin_load(const StringPtr& file_name, const ArgumentsPtr& args){
	if(CodePtr code = compile_file(file_name)){
		return code->call(args);
	}
	return undefined;
}

#ifndef XTAL_NO_PARSER

void eval(const VMachinePtr& vm){
	AnyPtr ev = vm->arg(0);
	int_t depth = vm->arg_default(1, 0)->to_i();

	if(CodePtr code = ptr_cast<Code>(ev)){
		vm->return_result(vm->eval(code, depth+1));
		return;
	}

	vm->return_result(vm->eval(eval_compile(ev), depth+1));
}

#endif

}

XTAL_PREBIND(ChRangeIter){
	Xregister(Builtin);
	Xinherit(Iterator);
}

XTAL_BIND(ChRangeIter){
	Xdef_method(block_next);
}

XTAL_PREBIND(ChRange){
	Xregister(Builtin);
	Xinherit(Range);
	Xdef_ctor2(const StringPtr&, const StringPtr&);
}

XTAL_BIND(ChRange){
	Xdef_method(each);
}

XTAL_PREBIND(Values){
	Xregister(Builtin);
	Xfinal();
	Xinherit(Iterator);
}

XTAL_BIND(Values){
	Xdef_method(block_next);
	Xdef_method(op_at);
	Xdef_method(size);
	Xdef_method(op_eq);
	Xdef_method(to_s);
}

XTAL_PREBIND(String){
	Xregister(Builtin);
	Xfinal();
	Xinherit(Iterable);
}

XTAL_BIND(String){
	Xdef_method_alias(op_call, &String::on_rawcall);

	Xdef_method(to_i);
	Xdef_method(to_f);
	Xdef_method(to_s);
	Xdef_method(clone);
	Xdef_method(length);
	Xdef_method(intern);
	Xdef_method(is_interned);	// ÉoÉCÉìÉhòRÇÍèCê≥ by êØÇ≠Ç∏îﬁï˚Ç…
	Xdef_method(is_ch);
	Xdef_method(ascii);
	Xdef_method(cat);			// ÉoÉCÉìÉhòRÇÍèCê≥ by êØÇ≠Ç∏îﬁï˚Ç…

	Xdef_method2(op_range, String);
	Xdef_method2(op_cat, String);
	Xdef_method_alias2(op_cat_assign, &Self::op_cat, String);
	Xdef_method2(op_eq, String);
	Xdef_method2(op_lt, String);
	Xdef_method2(op_in, ChRange);
	
	Xdef_method_alias(p, &Any_p);
}

XTAL_PREBIND(Any){
	Xregister(Builtin);
}

XTAL_BIND(Any){
	Xdef_method_alias(class, &Any::get_class);
	Xdef_method(get_class);
	Xdef_method(object_name);
	Xdef_method(object_name_list);
	Xdef_method_alias(p, &Any_p);
	Xdef_method_alias(to_s, &Any_to_s);
	Xdef_method_alias2(op_in, &Any_op_in_Array, Array);
	Xdef_method_alias2(op_in, &Any_op_in_Set, Set);
	Xdef_method2(op_eq, Any);
}

XTAL_BIND2(Any){
	for(int i=DefinedID::id_op_call; i<=DefinedID::id_op_in; ++i){
		it->def_double_dispatch_method(fetch_defined_id(i));
	}
}

XTAL_PREBIND(Undefined){
	Xregister(Builtin);
	Xfinal();
}

XTAL_PREBIND(Bool){
	Xregister(Builtin);
	Xinherit(Iterator);
	Xfinal();
}

XTAL_PREBIND(Null){
	Xregister(Builtin);
	Xinherit(Iterator);
	Xfinal();
}

XTAL_PREBIND(ImmediateValue){
	Xregister(Builtin);
	Xfinal();
}

XTAL_PREBIND(Int){
	Xregister(Builtin);
	Xinherit(Float);
	Xfinal();
}

XTAL_BIND(Int){
	Xdef_method(to_i);
	Xdef_method(to_f);
	Xdef_method_alias(f, &Int::to_f);
	Xdef_method_alias(F, &Int::to_f);
	Xdef_method(to_s);
	Xdef_method_alias2(op_range, &Int::op_range_Int, Int);
	Xdef_method_alias2(op_range, &Int::op_range_Float, Float);
	Xdef_method_alias2(op_in, &Int::op_in_IntRange, IntRange);
	Xdef_method_alias2(op_in, &Int::op_in_FloatRange, FloatRange);
}

XTAL_PREBIND(Float){
	Xregister(Builtin);
	Xfinal();
}

XTAL_BIND(Float){
	Xdef_method(to_i);
	Xdef_method(to_f);
	Xdef_method_alias(f, &Float::to_f);
	Xdef_method_alias(F, &Float::to_f);
	Xdef_method(to_s);
	Xdef_method_alias2(op_range, &Float::op_range_Int, Int);
	Xdef_method_alias2(op_range, &Float::op_range_Float, Float);
	Xdef_method_alias2(op_in, &Float::op_in_IntRange, IntRange);
	Xdef_method_alias2(op_in, &Float::op_in_FloatRange, FloatRange);
}

XTAL_PREBIND(IntRangeIter){
	Xinherit(Iterator);
}

XTAL_BIND(IntRangeIter){
	Xdef_method(block_next);
}

XTAL_PREBIND(Range){
	Xregister(Builtin);
	Xinherit(Iterable);

	Xdef_ctor3(const AnyPtr&, const AnyPtr&, int_t);
		Xparam(kind, 0);
}

XTAL_BIND(Range){
	Xdef_method(left);
	Xdef_method(right);
	Xdef_method(kind);

	Xdef_const(CLOSED);
	Xdef_const(LEFT_OPEN_RIGHT_CLOSED);
	Xdef_const(LEFT_CLOSED_RIGHT_OPEN);
	Xdef_const(OPEN);
}

XTAL_PREBIND(IntRange){
	Xregister(Builtin);
	Xinherit(Range);
	Xdef_ctor3(int_t, int_t, int_t);
		Xparam(kind, 0);
}

XTAL_BIND(IntRange){
	Xdef_method(begin);
	Xdef_method(end);
	Xdef_method(each);
}

XTAL_PREBIND(FloatRange){
	Xregister(Builtin);
	Xinherit(Range);
	Xdef_ctor3(float_t, float_t, int_t);
		Xparam(kind, 0);
}

XTAL_BIND(FloatRange){
}

XTAL_PREBIND(ArrayIter){
	Xinherit(Iterator);
}

XTAL_BIND(ArrayIter){
	Xdef_method(block_next);
}

XTAL_PREBIND(Array){
	Xregister(Builtin);
	Xfinal();
	Xinherit(Iterable);

	Xdef_ctor1(int_t);
		Xparam(size, 0);
}

XTAL_BIND(Array){

	Xdef_method(size);
	Xdef_method(length);
	Xdef_method(resize);
	Xdef_method(upsize);	// ÉoÉCÉìÉhòRÇÍèCê≥ by êØÇ≠Ç∏îﬁï˚Ç…
	Xdef_method(downsize);	// ÉoÉCÉìÉhòRÇÍèCê≥ by êØÇ≠Ç∏îﬁï˚Ç…

	Xdef_method(empty);
	Xdef_method(is_empty);
	
	Xdef_method(slice);
		Xparam(n, 1);
	
	Xdef_method(splice);
		Xparam(n, 1);
	
	Xdef_method(pop_back);
	Xdef_method(pop_front);
	Xdef_method(push_back);
	Xdef_method(push_front);

	Xdef_method(erase);
		Xparam(n, 1);

	Xdef_method(insert);
	Xdef_method(each);
	Xdef_method(clone);
	Xdef_method(front);
	Xdef_method(back);
	Xdef_method(clear);
	Xdef_method(reverse);
	Xdef_method(assign);
	Xdef_method(append);

	Xdef_method(op_to_array);
	Xdef_method2(op_cat, Array);
	Xdef_method2(op_cat_assign, Array);
	Xdef_method2(op_eq, Array);
	
	Xdef_method_alias2(op_at, &Array_op_at, Int);
	Xdef_method_alias2(op_set_at, &Array_op_set_at, Int);
	Xdef_method_alias2(op_call, &Array_op_at, Int);

	Xdef_method(join);
		Xparam(sep, empty_string);

	Xdef_method(to_s);
	Xdef_method(block_first);

}

XTAL_PREBIND(MapIter){
	Xinherit(Iterator);
}

XTAL_BIND(MapIter){
	Xdef_method(block_next);
}

XTAL_PREBIND(Map){
	Xregister(Builtin);
	Xinherit(Iterable);
	Xdef_ctor0();
}

XTAL_BIND(Map){
	Xdef_method(size);
	Xdef_method(length);
	Xdef_method(insert);
	Xdef_method(each);
	Xdef_method(pairs);
	Xdef_method(keys);
	Xdef_method(values);
	Xdef_method(clone);
	Xdef_method(clear);
	Xdef_method(erase);
	Xdef_method(empty);
	Xdef_method(is_empty);
	Xdef_method(assign);
	Xdef_method(append);
	Xdef_method(default_value);		// ÉoÉCÉìÉhòRÇÍèCê≥ by êØÇ≠Ç∏îﬁï˚Ç…
	Xdef_method(set_default_value);	// ÉoÉCÉìÉhòRÇÍèCê≥ by êØÇ≠Ç∏îﬁï˚Ç…

	Xdef_method(op_to_map);
	Xdef_method2(op_at, Any);
	Xdef_method2(op_set_at, Any);
	Xdef_method2(op_cat, Map);
	Xdef_method2(op_cat_assign, Map);
	Xdef_method_alias2(op_call, &Map::op_at, Any);

	Xdef_method(block_first);
	Xdef_method(to_s);
}

XTAL_PREBIND(Set){
	Xregister(Builtin);
	Xinherit(Map);
	Xdef_ctor0();
}

XTAL_BIND(Set){
	Xdef_method(each);
	Xdef_method(to_s);
}

XTAL_PREBIND(Fun){
	Xregister(Builtin);
	Xinherit(Method);
}

XTAL_PREBIND(Fiber){
	Xregister(Builtin);
	Xinherit(Fun);
	Xinherit(Iterator);
}

XTAL_BIND(Fiber){
	Xdef_method(reset);
	Xdef_method_alias(block_first, &Fiber::block_next);
	Xdef_method(block_next);
	Xdef_method_alias(block_break, &Fiber::halt);
	Xdef_method(halt);
	Xdef_method(is_alive);
	Xdef_method_alias(to_fiber, &Any_this);
}

XTAL_PREBIND(Lambda){
	Xregister(Builtin);
	Xinherit(Fun);
}

XTAL_PREBIND(Arguments){
	Xregister(Builtin);
	Xinherit(Iterable);
	Xdef_ctor2(const AnyPtr&, const AnyPtr&);
		Xparam(ordered, null);
		Xparam(named, null);
}

XTAL_BIND(Arguments){
	Xdef_method_alias(size, &Arguments::length);
	Xdef_method(length);
	Xdef_method(ordered_arguments);
	Xdef_method(named_arguments);
	
	Xdef_method_alias2(op_at, &Arguments::op_at_int, Int);
	Xdef_method_alias2(op_at, &Arguments::op_at_string, String);

	Xdef_double_dispatch_method(op_at);

	Xdef_method(each);
	Xdef_method_alias(pairs, &Arguments::each);
	Xdef_method(to_s);
}

XTAL_PREBIND(ArgumentsIter){
	Xinherit(Iterator);
}

XTAL_BIND(ArgumentsIter){
	Xdef_method(block_next);
}

XTAL_PREBIND(Code){
	Xregister(Builtin);
	Xinherit(Class);
}

XTAL_BIND(Code){
	Xdef_method(filelocal);
	Xdef_method(inspect);
}

XTAL_PREBIND(MembersIter){
	Xinherit(Iterator);
}

XTAL_BIND(MembersIter){
	Xdef_method(block_next);
}

XTAL_PREBIND(MembersIter2){
	Xinherit(Iterator);
}

XTAL_BIND(MembersIter2){
	Xdef_method(block_next);
}

XTAL_PREBIND(InheritedClassesIter){
	Xinherit(Iterator);
}

XTAL_BIND(InheritedClassesIter){
	Xdef_method(block_next);
}


XTAL_BIND(Frame){
	Xdef_method(members);
	Xdef_method(outer);
}

XTAL_PREBIND(Class){
	Xregister(Builtin);
	Xinherit(Frame);
}

XTAL_BIND(Class){
	Xdef_method_alias(inherit, &Class::inherit_strict);
	Xdef_method(overwrite);
	Xdef_method(s_new);
	Xdef_method(inherited_classes);
	Xdef_method(is_inherited);

	Xdef_method(find_near_member);
		Xparam(secondary_key, undefined);
}

XTAL_PREBIND(ZipIter){
	Xregister_alias(Builtin, zip);
	Xinherit(Iterator);
	Xdef_ctor1(const VMachinePtr&);
}

XTAL_BIND(ZipIter){
	Xdef_method(block_first);
	Xdef_method(block_next);
	Xdef_method(block_break);
}

#ifndef XTAL_NO_THREAD

XTAL_PREBIND(Thread){
	Xregister(Builtin);
	Xdef_ctor0();
}

XTAL_BIND(Thread){
	Xdef_method(start);
	Xdef_method(join);
	Xdef_fun_alias(yield, &yield_thread);
	Xdef_fun_alias(sleep, &sleep_thread);
}

XTAL_PREBIND(Mutex){
	Xregister(Builtin);
	Xdef_ctor0();
}

XTAL_BIND(Mutex){
	Xdef_method(lock);
	Xdef_method(unlock);
}

#endif

XTAL_PREBIND(Text){
	Xregister(Builtin);
	Xdef_serial_ctor();
}

XTAL_BIND(Text){
	Xdef_method(to_s);
	Xdef_method(serial_save);
	Xdef_method(serial_load);
}

XTAL_PREBIND(NativeMethod){
	Xregister(Builtin);	
}

XTAL_PREBIND(NativeFun){
	Xregister(Builtin);
	Xinherit(NativeMethod);
}

XTAL_PREBIND(Stream){
	Xregister(Builtin);
}

XTAL_BIND(Stream){
	Xdef_method(get_s);
	Xdef_method(get_s_all);
	
	Xdef_method_alias(put_s, &Stream_put_s);

	Xdef_method(print);
	Xdef_method(println);
	Xdef_method(printf);

	Xdef_method(seek);
	Xdef_method(tell);
	Xdef_method(pour);
	Xdef_method(pour_all);
	Xdef_method(size);
	Xdef_method(close);

	Xdef_method(flush);

	Xdef_method(eos);

	Xdef_method(serialize);
	Xdef_method(deserialize);

	Xdef_method(block_first);
	Xdef_method(block_next);
	Xdef_method(block_break);

	Xdef_method(put_i8);
	Xdef_method(put_u8);

	Xdef_method(put_i16be);
	Xdef_method(put_i32be);
	Xdef_method(put_u16be);
	Xdef_method(put_u32be);
	Xdef_method(put_f32be);

	Xdef_method(put_i16le);
	Xdef_method(put_i32le);
	Xdef_method(put_u16le);
	Xdef_method(put_u32le);
	Xdef_method(put_f32le);

	Xdef_method(get_u8);
	Xdef_method(get_i8);

	Xdef_method(get_i16be);
	Xdef_method(get_i32be);
	Xdef_method(get_u16be);
	Xdef_method(get_u32be);
	Xdef_method(get_f32be);

	Xdef_method(get_i16le);
	Xdef_method(get_i32le);
	Xdef_method(get_u16le);
	Xdef_method(get_u32le);
	Xdef_method(get_f32le);
}

XTAL_PREBIND(PointerStream){
	Xinherit(Stream);
}

XTAL_PREBIND(MemoryStream){
	Xregister(Builtin);
	Xinherit(PointerStream);
	Xdef_ctor0();
}

XTAL_BIND(MemoryStream){
	Xdef_method(to_s);
	Xdef_method(resize);
}

XTAL_PREBIND(StringStream){
	Xregister(Builtin);
	Xinherit(Stream);
	Xdef_ctor1(const StringPtr&);
}

XTAL_BIND(StringStream){
	Xdef_method(to_s);
}

XTAL_PREBIND(FileStream){
	Xregister(Builtin);
	Xinherit(Stream);
	Xdef_ctor2(const StringPtr&, const StringPtr&);
}

XTAL_PREBIND(CompressEncoder){
	Xregister(Builtin);
	Xinherit(Stream);
	Xdef_ctor1(const StreamPtr&);
}

XTAL_PREBIND(CompressDecoder){
	Xregister(Builtin);
	Xinherit(Stream);
	Xdef_ctor1(const StreamPtr&);
}

XTAL_PREBIND(StdinStream){
	Xregister(Builtin);
	Xinherit(Stream);
}

XTAL_PREBIND(StdoutStream){
	Xregister(Builtin);
	Xinherit(Stream);
}

XTAL_PREBIND(StderrStream){
	Xregister(Builtin);
	Xinherit(Stream);
}

namespace debug{

XTAL_PREBIND(HookInfo){
	Xregister(Debug);
}

XTAL_BIND(HookInfo){
	Xdef_method(clone);
	Xdef_method(kind);
	Xdef_method(fun);
	Xdef_method(lineno);
	Xdef_method(fun_name);
	Xdef_method(file_name);
	Xdef_method(exception);
	Xdef_method(variables_frame);

	//Xdef_method(set_kind);
	//Xdef_method(set_line);
	//Xdef_method(set_fun_name);
	//Xdef_method(set_file_name);
	//Xdef_method(set_exception);
	//Xdef_method(set_variables_frame);

	Xdef(LINE, (int_t)BREAKPOINT_LINE);
	Xdef(CALL, (int_t)BREAKPOINT_CALL);
	Xdef(RETURN, (int_t)BREAKPOINT_RETURN);
	Xdef(THROW, (int_t)BREAKPOINT_THROW);
}

XTAL_PREBIND(Debug){
	Xregister_alias(Builtin, debug);
}

XTAL_BIND(Debug){
	Xdef_fun_alias(enable, &enable);
	Xdef_fun_alias(disable, &disable);
	Xdef_fun_alias(enable_force, &enable_force);	// ÉoÉCÉìÉhòRÇÍèCê≥ by êØÇ≠Ç∏îﬁï˚Ç…
	Xdef_fun_alias(disable_force, &disable_force);	// ÉoÉCÉìÉhòRÇÍèCê≥ by êØÇ≠Ç∏îﬁï˚Ç…
	Xdef_fun_alias(is_enabled, &is_enabled);

	Xdef_fun_alias(breakpoint_hook, &breakpoint_hook);
	Xdef_fun_alias(call_hook, &call_hook);
	Xdef_fun_alias(return_hook, &return_hook);
	Xdef_fun_alias(throw_hook, &throw_hook);
	Xdef_fun_alias(assert_hook, &assert_hook);	// ÉoÉCÉìÉhòRÇÍèCê≥ by êØÇ≠Ç∏îﬁï˚Ç…

	Xdef_fun_alias(set_breakpoint_hook, &set_breakpoint_hook);
	Xdef_fun_alias(set_call_hook, &set_call_hook);
	Xdef_fun_alias(set_return_hook, &set_return_hook);
	Xdef_fun_alias(set_throw_hook, &set_throw_hook);
	Xdef_fun_alias(set_assert_hook, &set_assert_hook);	// ÉoÉCÉìÉhòRÇÍèCê≥ by êØÇ≠Ç∏îﬁï˚Ç…
}

}

XTAL_PREBIND(Iterable){
	Xregister(Builtin);
	Xxtal_class();
}

XTAL_BIND(Iterable){
	// IterableÇ™ÉoÉCÉìÉhÇ≥ÇÍÇÈÇ»ÇÁÅAIteratorÇ‡ÉoÉCÉìÉhÇµÇƒÇµÇ‹Ç§
	// Ç»Ç∫Ç»ÇÁÅAIterableÇÕIteratorÇ…ÉÅÉìÉoéÊìæÇàœè˜Ç∑ÇÈÇ©ÇÁ
	cpp_class<Iterator>()->bind();
}

XTAL_PREBIND(Iterator){
	Xregister(Builtin);
	Xinherit(Iterable);
	Xxtal_class();
}

XTAL_BIND(Iterator){
	Xdef_fun_alias(each, &Iterator_each);
	Xdef_fun_alias(block_first, &Iterator_block_first);
}

XTAL_PREBIND(Exception){
	Xregister(Builtin);
	Xdef_ctor1(const StringPtr&);
		Xparam(message, empty_string);
}

XTAL_BIND(Exception){
	Xdef_method(initialize);
		Xparam(message, empty_string);
	
	Xdef_method(to_s);
	Xdef_method(message);
	Xdef_method(backtrace);
	Xdef_method(append_backtrace);
}

XTAL_PREBIND(StandardError){
	Xregister(Builtin);
	Xxtal_class();
	Xinherit(Exception);
}

XTAL_PREBIND(RuntimeError){
	Xregister(Builtin);
	Xxtal_class();
	Xinherit(StandardError);
}

XTAL_PREBIND(IOError){
	Xregister(Builtin);
	Xxtal_class();
	Xinherit(StandardError);
}

XTAL_PREBIND(EOSError){
	Xregister(Builtin);
	Xxtal_class();
	Xinherit(StandardError);
}

XTAL_PREBIND(LogicError){
	Xregister(Builtin);
	Xxtal_class();
	Xinherit(StandardError);
}

XTAL_PREBIND(CastError){
	Xregister(Builtin);
	Xxtal_class();
	Xinherit(StandardError);
}

XTAL_PREBIND(ArgumentError){
	Xregister(Builtin);
	Xxtal_class();
	Xinherit(StandardError);
}

XTAL_PREBIND(YieldError){
	Xregister(Builtin);
	Xxtal_class();
	Xinherit(StandardError);
}

XTAL_PREBIND(InstanceVariableError){
	Xregister(Builtin);
	Xxtal_class();
	Xinherit(StandardError);
}

XTAL_PREBIND(UnsupportedError){
	Xregister(Builtin);
	Xxtal_class();
	Xinherit(StandardError);
}

XTAL_PREBIND(RedefinedError){
	Xregister(Builtin);
	Xxtal_class();
	Xinherit(StandardError);
}

XTAL_PREBIND(AccessibilityError){
	Xregister(Builtin);
	Xxtal_class();
	Xinherit(StandardError);
}

XTAL_PREBIND(AssertionFailed){
	Xregister(Builtin);
	Xxtal_class();
	Xinherit(Exception);
}

XTAL_PREBIND(CompileError){
	Xregister(Builtin);
	Xxtal_class();
	Xinherit(StandardError);
}

namespace filesystem{

XTAL_PREBIND(Filesystem){
	Xregister_alias(Builtin, filesystem);
}

XTAL_BIND(Filesystem){
	Xdef_fun_alias(open, &open);
	Xdef_fun_alias(entries, &entries);
	Xdef_fun_alias(is_directory, &is_directory);
}

XTAL_PREBIND(Entries){
	Xregister(Filesystem);
	Xinherit(Iterator);
}

XTAL_BIND(Entries){
	Xdef_method(block_next);
	Xdef_method(block_break);
}

}

namespace{

AnyPtr abs(const AnyPtr& a){
	switch(XTAL_detail_type(a)){XTAL_DEFAULT;
		XTAL_CASE(TYPE_INT){ return XTAL_detail_ivalue(a)<0 ? AnyPtr(-XTAL_detail_ivalue(a)) : a; }
		XTAL_CASE(TYPE_FLOAT){ return XTAL_detail_fvalue(a)<0 ? AnyPtr(-XTAL_detail_fvalue(a)) : a; }
	}
	return 0;
}

struct f2{
	float_t a, b;
};

inline void to_f2(f2& ret, int_t atype, const AnyPtr& a, int_t btype, const AnyPtr& b){
	float_t aa[2] = {(float_t)XTAL_detail_ivalue(a), XTAL_detail_fvalue(a)};
	float_t bb[2] = {(float_t)XTAL_detail_ivalue(b), XTAL_detail_fvalue(b)};
	ret.a = aa[atype];
	ret.b = bb[btype];
}

AnyPtr max_(const AnyPtr& a, const AnyPtr& b){
	uint_t btype = XTAL_detail_type(b)-TYPE_INT;
	uint_t atype = XTAL_detail_type(a)-TYPE_INT;
	uint_t abtype = atype | btype;

	if(abtype==0){
		return XTAL_detail_ivalue(a) < XTAL_detail_ivalue(b) ? b : a;	
	}

	if(abtype==1){
		f2 ab;
		to_f2(ab, atype, a, btype, b);
		return ab.a < ab.b ? b : a;	
	}

	return null;
}

AnyPtr min_(const AnyPtr& a, const AnyPtr& b){
	uint_t btype = XTAL_detail_type(b)-TYPE_INT;
	uint_t atype = XTAL_detail_type(a)-TYPE_INT;
	uint_t abtype = atype | btype;

	if(abtype==0){
		return XTAL_detail_ivalue(a) < XTAL_detail_ivalue(b) ? a : b;	
	}

	if(abtype==1){
		f2 ab;
		to_f2(ab, atype, a, btype, b);
		return ab.a < ab.b ? a : b;	
	}

	return null;
}

class Random{
public:

	Random(int_t seed=1){ 
		set_seed(seed); 
	}
	
	void set_seed(int_t seed){
		idum_ = seed==0 ? 1 : seed; 
	} 

	float_t operator ()();
	
	float_t operator ()(float_t max){
		return (*this)()*max; 
	}

	float_t operator ()(float_t min, float_t max){
		return (*this)()*(max-min)+min; 
	}	

private:
	enum{ IA=16807,IM=2147483647,IQ=127773,IR=2836 };
	int_t idum_;
};

float_t Random::operator ()(){
	int_t idum = idum_;
	int_t k = idum/IQ;
	idum = IA*(idum-k*IQ)-IR*k;
	idum &= IM;
	idum_ = idum;
	return ((float_t)1.0/IM)*idum;
}	

Random random_instance;

float_t random(){
	return random_instance();
}

float_t random_range(float_t in, float_t ax){
	return random_instance(in, ax);
}

}

template<class T>
struct TMath;

template<>
struct TMath<float>{
	static float acos(float v){ using namespace std; return acosf(v); }
	static float asin(float v){ using namespace std; return asinf(v); }
	static float atan(float v){ using namespace std; return atanf(v); }
	static float atan2(float v, float u){ using namespace std; return atan2f(v, u); }
	static float ceil(float v){ using namespace std; return ceilf(v); }
	static float cos(float v){ using namespace std; return cosf(v); }
	static float exp(float v){ using namespace std; return expf(v); }
	static float floor(float v){ using namespace std; return floorf(v); }
	static float log(float v){ using namespace std; return logf(v); }
	static float pow(float v, float u){ using namespace std; return powf(v, u); }
	static float sin(float v){ using namespace std; return sinf(v); }
	static float sqrt(float v){ using namespace std; return sqrtf(v); }
	static float tan(float v){ using namespace std; return tanf(v); }
};

template<>
struct TMath<double>{
	static double acos(double v){ using namespace std; return acos(v); }
	static double asin(double v){ using namespace std; return asin(v); }
	static double atan(double v){ using namespace std; return atan(v); }
	static double atan2(double v, double u){ using namespace std; return atan2(v, u); }
	static double ceil(double v){ using namespace std; return ceil(v); }
	static double cos(double v){ using namespace std; return cos(v); }
	static double exp(double v){ using namespace std; return exp(v); }
	static double floor(double v){ using namespace std; return floor(v); }
	static double log(double v){ using namespace std; return log(v); }
	static double pow(double v, double u){ using namespace std; return pow(v, u); }
	static double sin(double v){ using namespace std; return sin(v); }
	static double sqrt(double v){ using namespace std; return sqrt(v); }
	static double tan(double v){ using namespace std; return tan(v); }
};

struct Math : TMath<float_t>{};

XTAL_PREBIND(Math){
	Xregister_alias(Builtin, math);
}

XTAL_BIND(Math){
	Xdef_fun(acos);
	Xdef_fun(asin);
	Xdef_fun(atan);
	Xdef_fun(atan2);
	Xdef_fun(ceil);
	Xdef_fun(cos);
	Xdef_fun(exp);
	Xdef_fun(floor);
	Xdef_fun(log);
	Xdef_fun(pow);
	Xdef_fun(sin);
	Xdef_fun(sqrt);
	Xdef_fun(tan);

	Xdef_fun_alias(abs, &abs);
	Xdef_fun_alias(max, &max_);
	Xdef_fun_alias(min, &min_);
	Xdef_fun_alias(random, &random);
	Xdef_fun_alias(random_range, &random_range);

	Xdef(PI, (float_t)3.14159265358979);
	Xdef(E, (float_t)2.71828182845905);
}

XTAL_PREBIND(TreeNode){
	Xregister(Builtin);
	Xfinal();
	Xinherit(Array);
}

XTAL_BIND(TreeNode){
	Xdef_method(tag);
	Xdef_method(lineno);
	Xdef_method(set_tag);
	Xdef_method(set_lineno);
	Xdef_method(op_at);
	Xdef_method(op_set_at);
}

namespace xpeg{

class Xpeg{};
class XpegOperator{};

XTAL_PREBIND(Xpeg){
	Xregister_alias(Builtin, xpeg);
	Xxtal_class();
}

XTAL_BIND(Xpeg){
	Xdef_fun_alias(elem, &elem);
}

XTAL_PREBIND(XpegOperator){
	Xregister(Xpeg);
	Xxtal_class();
}

XTAL_PREBIND(Element){
	Xregister(Xpeg);
	Xdef_ctor4(int_t, const AnyPtr&, const AnyPtr&, int_t);
		Xparam(param1, null);
		Xparam(param2, null);
		Xparam(param3, 0);
}

XTAL_BIND(Element){
	Xdef_var(type);
	Xdef_var(param1);
	Xdef_var(param2);
	Xdef_var(param3);

	Xdef_method(op_com);

	Xdef_const(TYPE_INVALID);
	Xdef_const(TYPE_ANY);
	Xdef_const(TYPE_BOS);
	Xdef_const(TYPE_EOS);
	Xdef_const(TYPE_BOL);
	Xdef_const(TYPE_EOL);
	Xdef_const(TYPE_BACKREF);
	Xdef_const(TYPE_EQL);
	Xdef_const(TYPE_PRED);
	Xdef_const(TYPE_CALL);
	Xdef_const(TYPE_INT_RANGE);
	Xdef_const(TYPE_FLOAT_RANGE);
	Xdef_const(TYPE_CH_RANGE);
	Xdef_const(TYPE_CH_SET);
	Xdef_const(TYPE_GREED);
	Xdef_const(TYPE_LOOKAHEAD);
	Xdef_const(TYPE_LOOKBEHIND);
	Xdef_const(TYPE_LEAF);
	Xdef_const(TYPE_NODE);
	Xdef_const(TYPE_ERROR);
	Xdef_const(TYPE_CONCAT);
	Xdef_const(TYPE_OR);
	Xdef_const(TYPE_MORE0);
	Xdef_const(TYPE_MORE1);
	Xdef_const(TYPE_01);
	Xdef_const(TYPE_EMPTY);
	Xdef_const(TYPE_CAP);
	Xdef_const(TYPE_DECL);
}

XTAL_PREBIND(Executor){
	Xregister(Xpeg);

	Xdef_ctor1(const StringPtr&);
		Xparam(source, empty_string);
}

XTAL_BIND(Executor){
	//Xdef_method(reset);
	Xdef_method(parse);
	Xdef_method(match);

	Xdef_method(captures);
	Xdef_method(captures_values);		
	Xdef_method_alias2(op_at, &Executor::at, String);
	Xdef_method_alias2(op_call, &Executor::call, String);
	Xdef_method(prefix);
	Xdef_method(suffix);
	Xdef_method(prefix_values);
	Xdef_method(suffix_values);
	Xdef_method(errors);
	Xdef_method(read);

	Xdef_method(peek);
		Xparam(n, 0);

	Xdef_method(tree);
	Xdef_method(bos);
	Xdef_method(eos);
}

XTAL_PREBIND(StreamExecutor){
	Xinherit(Executor);
	Xregister(Xpeg);

	Xdef_ctor2(const StreamPtr&, const StringPtr&);
		Xparam(source_name, empty_string);
}

XTAL_PREBIND(IteratorExecutor){
	Xinherit(Executor);
	Xregister(Xpeg);

	Xdef_ctor2(const AnyPtr&, const StringPtr&);
		Xparam(source_name, empty_string);
}

}

//*

XTAL_PREBIND(AutoLoader){
	Xinherit(Class);
	Xregister(Builtin);
	Xdef_ctor0();
}

XTAL_BIND(AutoLoader){
	Xdef_method(append_load_path);
}

XTAL_PREBIND(Builtin){
	Xinherit(Global);
	Xregister_alias(Lib, builtin);
	Xregister_alias(Builtin, builtin);
	Xxtal_class();
	Xsingleton();
}

XTAL_BIND(Builtin){
	Xdef_fun_alias(assign_text_map, &assign_text_map);
	Xdef_fun_alias(append_text_map, &append_text_map);
	Xdef_fun_alias(format, &String_format);
	Xdef_fun_alias(text, &String_text);
	Xdef_fun_alias(current_context, &VMachine_current_context);
	
	Xdef_fun_alias(require, &require);
	Xdef_fun_alias(require_source, &require_source);

	Xdef_fun_alias(gc, &::xtal::gc);
	Xdef_fun_alias(full_gc, &::xtal::full_gc);
	Xdef_fun_alias(disable_gc, &::xtal::disable_gc);
	Xdef_fun_alias(enable_gc, &::xtal::enable_gc);
	Xdef_fun_alias(set_gc_stress, &::xtal::set_gc_stress);
	//Xdef_fun_alias(clock, &clock_);

	Xdef_fun_alias(print, &builtin_print);
	Xdef_fun_alias(println, &builtin_println);
	Xdef_fun_alias(printf, &builtin_printf);

	Xdef_fun_alias(open, &xtal::open);
		Xparam(mode, XTAL_STRING("r"));
	
	Xdef_fun_alias(load, &builtin_load);
	Xdef_fun_alias(compile_file, &compile_file);
	Xdef_fun_alias(compile, &compile);

#ifndef XTAL_NO_PARSER
	Xdef_fun_alias(eval_compile, &eval_compile);
	Xdef_fun_alias(eval, &eval);
#endif
}

void bind(){
	using namespace xpeg;
	static CppClassSymbolData* classes[4] = {&CppClassSymbol<Element>::value, &CppClassSymbol<ChRange>::value, &CppClassSymbol<String>::value, &CppClassSymbol<Fun>::value };
	for(int i=0; i<4; ++i){
		cpp_class(classes[i])->inherit(cpp_class<XpegOperator>());
	}		
}

//*/

////////////////////////////////////////////////////////////////////////
//*

XTAL_BIND2(Bool){
	Xemb((
Bool::block_next: method{ return null, this; }
Bool::block_first: Bool::block_next;
Bool::to_s: method this ? "true" : "false";

),
"\xbf\x78\x74\x61\x6c\x01\x01\xe9\xf2\x62\xff\x30\x00\x00\x02\x4b\x01\x00\x01\xfb\x00\x11\xf3\xf0\x06\x01\x3c\x00\x02\xff\x3c\x00"
"\x00\x4a\x00\x00\x03\x00\xfb\x00\x01\xfa\xf1\x30\x02\x00\x02\x32\x2f\x01\x02\x00\x03\x0f\x00\x04\x13\x04\xfe\xf0\xbf\x02\x00\x1f"
"\x06\x00\x1d\x05\x00\x00\x3b\x0d\x02\x13\x00\x1b\x00\x07\x3c\x00\x0b\x00\x54\x08\x00\x0e\x01\x05\x13\x03\x06\x47\x00\x51\x25\x01"
"\x80\xe9\xf2\x3c\x00\xe5\xf6\x65\x05\x5d\x01\x12\x00\xe9\xf2\x34\x00\xeb\xf0\x50\x00\xeb\xf0\xf3\xf3\x63\x0b\x7c\x03\x7d\x05\xf3"
"\xf2\x42\xf3\xf3\x0a\x50\x00\x7d\x02\x8f\x05\xeb\xf0\x3a\x50\x00\xd0\x89\x02\xc5\x06\xc5\x08\x8c\x04\x61\x00\x00\x01\x0b\xfe\xeb"
"\xf0\x11\x74\x6f\x6f\x6c\x2f\x74\x7f\x65\x6d\x70\x2f\x69\x6e\x2e\xee\xf1\xe7\x00\x07\x0e\xea\xf1\x11\x11\x08\x74\x6f\xbf\x70\x6c"
"\x65\x76\x65\x6c\x11\x11\x04\xf9\x42\xff\x00\x11\x11\x0a\x62\x6c\x6f\x63\xbf\x6b\x5f\x6e\x65\x78\x74\x11\x11\x0b\xde\x31\x13\x66"
"\x69\x72\x73\x3a\x12\x04\x74\xf7\x6f\x5f\x73\x11\x11\x09\x66\x69\x6c\xd9\x65\x32\x10\x0d\x10\x03\x03\xf9\x01\x04\x74\xf7\x72\x75"
"\x65\xf9\x01\x05\x66\x61\x6c\x07\x73\x65\x03"
);
}

XTAL_BIND2(Null){

	Xemb((
Null::each: method null;
Null::op_to_array: method [];
Null::op_to_map: method [:];
Null::block_first: method null;
),
"\xbf\x78\x74\x61\x6c\x01\x01\xe9\xf2\x6e\xff\x30\x00\x00\x02\x4b\x01\x00\x01\xfb\x00\x0f\xf3\xf0\x3c\x00\x01\x3c\x00\xff\x00\x4a"
"\x00\x00\x03\x00\x00\x01\x5e\xfa\xf4\x02\x00\x0e\x42\x06\x07\x04\x11\x07\xaf\x03\x00\x0e\x44\x06\x07\x05\x11\x07\x04\x2a\x02\x0b"
"\x06\x11\x03\x07\x07\x00\x51\x5b\x01\xe9\xf2\x41\x02\xe3\xf8\x71\x05\x29\x00\x0f\x01\xe9\xf2\x1e\x82\x04\x22\xea\xf1\x37\xeb\xf0"
"\x42\x00\xe9\xf2\x50\xeb\xf0\x69\x03\x40\xf3\xf3\x6f\x0b\xa0\x03\x89\x05\xf3\xf2\xf3\xf3\x0a\x42\x00\x88\x89\x02\xb3\x05\xeb\xf0"
"\x24\x42\x00\x95\x02\xe9\x08\x3d\x08\x42\x00\xa1\x02\xe9\x08\x56\x42\x00\x69\x02\xe9\x06\xe9\x08\xda\xb0\x04\x6d\x00\x00\x01\x0b"
"\xeb\xf0\x11\x74\xff\x6f\x6f\x6c\x2f\x74\x65\x6d\x70\xef\x2f\x69\x6e\x2e\xee\xf1\x00\x08\x0e\xfc\xea\xf1\x5d\x11\x08\x74\x6f\x70"
"\x6c\x65\xf7\x76\x65\x6c\x5d\x11\x04\x4e\x75\x6c\xde\x6e\x13\x65\x61\x63\x68\x5d\x11\x0b\x6f\xff\x70\x5f\x74\x6f\x5f\x61\x72\x72"
"\xeb\x61\x79\x5d\x11\x09\x86\x13\x6d\x61\x70\xfe\x81\x12\x62\x6c\x6f\x63\x6b\x5f\x66\xef\x69\x72\x73\x74\x91\x12\x66\x69\x6c\x39"
"\x65\xa5\x10\x59\x10\x01\x03\x03"
);

}

XTAL_BIND2(String){

	Xemb((

String::each: method StringStream(this).chars;

String::scan: method(pattern){
	return StringStream(this).scan(pattern);
}

String::split: method(pattern){
	return StringStream(this).split(pattern);
}

String::match: method(pattern){
	return StringStream(this).match(pattern);
}

String::parse: method(pattern){
	return StringStream(this).parse(pattern);
}

String::gsub: method(pattern, fn){
	mm: MemoryStream();
	exec: xpeg::StreamExecutor(StringStream(this));
	if(exec.match(pattern)){
		prefix: exec.prefix;
		mm.put_s(prefix);
		mm.put_s(fn(exec));

		while(exec.match(pattern)){
			prefix: exec.prefix;
			mm.put_s(prefix);
			mm.put_s(fn(exec));
		}

		mm.put_s(exec.suffix);
		return mm.to_s;
	}
	else{
		return this;
	}
}

String::sub: method(pattern, fn){
	mm: MemoryStream();
	exec: xpeg::StreamExecutor(StringStream(this));
	if(exec.match(pattern)){
		prefix: exec.prefix;
		suffix: exec.suffix;
		mm.put_s(prefix);
		mm.put_s(fn(exec));
		mm.put_s(exec.suffix);
		return mm.to_s;
	}
	else{
		return this;
	}
}

),
"\xbf\x78\x74\x61\x6c\x01\x01\xea\xf1\x02\xfb\x3c\x30\xf6\xf0\x4b\x01\x00\x01\x00\xff\x1e\x30\x02\x00\x03\x06\x03\x34\xbf\x01\x01"
"\x02\x03\x01\x38\x00\x00\x04\xff\x02\x3c\x00\x01\x3c\x00\x00\x4a\xbf\x00\x00\x05\x00\x00\x01\xfa\xf4\x02\xfb\x00\x24\x04\x09\x07"
"\x02\xff\x36\x00\x4e\xf2\xf0\x08\x00\x02\x18\x00\x18\x04\x08\x20\x07\xa9\x03\x2b\x0f\x3d\x01\x0b\x42\x09\x0b\x20\x07\x04\x54\x5a"
"\x0f\x3d\x01\x0e\x42\x09\x0e\x20\x07\x05\x89\x0f\xea\x3d\x01\x11\x42\x09\x11\x20\x07\x06\x00\xbb\xee\xfa\xf0\x16\x34\xfc\xff\xf1"
"\x30\x01\x00\x6b\x17\x32\x00\x00\x18\x04\x09\x34\xfd\xff\xf0\xaf\x01\x07\x01\xfa\x3c\x00\xfd\x9e\x00\x01\xf7\x01\x1d\x00\xe5\x00"
"\x7c\x38\xfe\xfd\xff\x00\x19\x00\x07\x00\xfe\x39\xfc\xff\x00\x1a\x00\x07\x01\xfd\x34\x00\xcf\x01\xfb\x01\x01\x29\x14\x10\x1c\x37"
"\x38\xe5\xff\x22\x13\xff\x29\x1f\x3b\x1c\xff\xd8\x00\xff\x09\x1b\xff\xd2\x38\x00\xfd\x00\x7d\x1b\x64\x13\x38\x00\xfc\x00\x1c\x44"
"\x01\x1f\x1b\x00\x08\x06\x00\x16\x06\x1a\x10\x22\x05\x87\x07\x00\x7e\xe9\x02\x09\x11\xf2\x0f\x04\x12\xfe\xea\x0a\x13\xfb\x3c\x00"
"\xfe\x15\x17\x3f\x38\xff\x9d\xfe\x23\x10\x38\x00\xfe\x82\x10\x54\x11\xfd\x0a\x59\x12\xfe\x5f\x10\xfc\x63\x10\xf6\x11\xec\x13\x03"
"\x24\x5d\xfd\x8d\x1f\x00\x00\x22\x20\x03\x23\x16\x00\x17\x51\x00\x09\xe7\xf4\x02\xe5\x00\xe6\xf5\x3f\x25\x55\x04\xeb\xf0\x03\xe7"
"\xf4\x2d\xeb\xf0\x06\x00\x00\xaa\xf3\xf1\x5c\xeb\xf0\x09\x64\x24\x8b\xeb\xf0\x0c\xaa\x64\x24\xba\xeb\xf0\x0f\x64\x24\xe9\xeb\xf0"
"\x12\xaa\xe5\x00\x02\x20\x00\xaf\xeb\xf0\x1e\x1e\x00\x02\x80\x66\x22\x3b\x2d\x4d\x01\x55\x27\xf3\xf0\x63\x21\xea\xf1\x0a\x50\x1f"
"\x00\x57\x22\xa5\x25\xeb\xf0\x33\x1f\x00\x07\x64\x21\xa8\xf3\xf0\xef\x21\xf3\xf1\x62\x1f\x00\x0a\xeb\x2c\x91\xaa\x1f\x00\x0d\xeb"
"\x2c\xc0\x1f\x00\x10\xeb\x2c\xef\xb2\x1f\x00\x14\x94\x21\xc7\x22\x00\x02\x97\x21\xb5\x02\x1f\x00\x20\xa0\x21\xf3\xf0\x1f\x00\x45"
"\x30\xdb\x28\xc4\x23\xf3\x02\x3b\x64\x21\x7d\x00\x00\x11\x74\x6f\xff\x6f\x6c\x2f\x74\x65\x6d\x70\x2f\x37\x69\x6e\x2e\xee\xf1\x00"
"\x24\xac\x00\xaa\x02\xff\x00\x08\x74\x6f\x70\x6c\x65\x76\xfb\x65\x6c\x8b\x31\x06\x53\x74\x72\x69\xcb\x6e\x67\x8b\x31\x0c\xa2\x33"
"\xa2\x30\x65\x61\xfd\x6d\x8b\x31\x05\x63\x68\x61\x72\x73\xbe\x8b\x31\x04\x65\x61\x63\x68\x8b\x31\x07\x7f\x70\x61\x74\x74\x65\x72"
"\x6e\x97\x20\x3b\x00\x08\xc3\x32\x73\x63\x61\xd7\x33\xd8\x36\xbf\x05\x73\x70\x6c\x69\x74\xe6\x3c\x6d\xaf\x61\x74\x63\x68\xe6\x3c"
"\x70\xc0\x30\x65\xd6\xd8\x36\x02\x66\xe5\x37\x0d\xa8\x32\x4d\x65\xef\x6d\x6f\x72\x79\xb3\x37\x04\x78\x70\xf5\x65\xa7\x32\x0e\xb3"
"\x33\x45\x78\x65\x63\xef\x75\x74\x6f\x72\x9d\x32\x70\x72\x65\x77\x66\x69\x78\x18\x43\x75\x74\x5f\xc2\x32\xef\x06\x73\x75\x66\x6d"
"\x44\x04\x74\x6f\x3e\x78\x43\x04\x67\x73\x75\x62\x2e\x47\x2e\x4b\xf9\x03\x94\x40\x8b\x31\x09\x66\x69\x6c\x65\x77\x6c\x6f\x63\x87"
"\x30\x01\x03\x03"
);

}

XTAL_BIND2(Int){
	Xemb((

Int::times: method fiber{
	for(i: 0; i<this; ++i){
		yield i;
	}
}

Int::block_next: method{
	return (this==0 ? null : this-1), this;
}

Int::block_first: Int::block_next;

Int::op_eq#Int: method(v) this==v;
Int::op_lt#Int: method(v) this<v;

	),
"\xbf\x78\x74\x61\x6c\x01\x01\xea\xf1\x01\xff\x0e\x30\x00\x00\x02\x4b\x01\x00\xef\x01\x00\x3f\x4b\xfb\xf0\x00\x33\x03\xff\xff\x00"
"\x06\x01\x1f\xff\x01\x02\xff\x1d\x00\x00\x06\x00\x21\x07\x00\xdb\xff\x3d\xf5\xf1\x08\xff\x0b\x07\xff\xee\xff\x00\x09\x1b\xff\xe8"
"\x3c\x00\x00\xf7\x3c\x00\x01\x34\x00\x4a\x00\x00\x03\xfc\xf6\xf0\xfa\xf4\x03\x00\x3d\x06\x02\x03\xff\x03\x00\x1e\x02\x03\x04\x1d"
"\x01\x2a\x15\x00\x0c\x49\x00\x1b\x0c\x00\x00\x12\x03\x5c\x00\xff\x00\x1b\x00\x0e\x06\x01\x03\x02\xbf\x01\x0e\x00\x01\x02\x03\x0c"
"\x00\x3c\xeb\x00\x02\x3a\x03\x04\x41\x04\x30\x02\x00\xbf\x02\x32\x01\x02\x00\x04\x3d\x00\x05\xfe\x41\x07\x04\x00\x21\x06\x02\x1e"
"\x02\xc3\xff\x03\x57\x0c\x37\x03\x90\x01\x3d\x00\x08\x02\x95\x08\x43\x05\x05\xa8\x01\x1f\xad\x0f\xbf\x0a\x0b\xba\xcd\x03\x0c\x37"
"\x00\x51\x00\x07\xe7\xf4\x02\x40\x00\x00\xe6\xf5\x11\x15\x88\x00\x3f\x00\x13\x13\x0a\x26\x18\x29\x4e\x22\x14\xea\xf1\xaa\xeb\xf0"
"\x06\x00\x00\xf3\xf1\x05\xda\xeb\xf0\x09\x4e\x12\x13\x15\x11\x19\x15\x00\x26\x12\x08\xe8\xf3\xf3\xf0\x5d\x15\x0a\x9c\x00\x29\x12"
"\x92\x13\xe9\xf2\x89\x10\x74\x10\x90\x1d\x54\x9c\x00\x41\x12\x69\x18\xb0\xa2\x9c\x00\x07\x4e\x11\x92\x14\xf3\xf1\xe0\x9c\x00\x0a"
"\xa8\xcd\x1a\x69\x18\x7e\x14\x0d\x4e\x11\x0b\xeb\xf0\x11\xff\x74\x6f\x6f\x6c\x2f\x74\x65\x6d\xdf\x70\x2f\x69\x6e\x2e\xee\xf1\x00"
"\x0d\xf9\x0e\xea\xf1\x1d\x21\x08\x74\x6f\x70\x6c\xef\x65\x76\x65\x6c\x1d\x21\x03\x49\x6e\xfd\x74\x1d\x21\x05\x74\x69\x6d\x65\x73"
"\xfe\x1d\x21\x0a\x62\x6c\x6f\x63\x6b\x5f\xd7\x6e\x65\x78\x36\x22\x0b\x46\x23\x66\x69\x3b\x72\x73\x36\x22\x01\x76\x02\x23\x21\x37"
"\x22\x9f\x6f\x70\x5f\x65\x71\x66\x22\x66\x2a\x6c\x3e\x36\x22\x09\x66\x69\x6c\x65\x47\x20\x19\x20\x07\x01\x03\x03"
);

}

XTAL_BIND2(Float){
	Xemb((

Float::op_eq#Float: method(v) this==v;
Float::op_lt#Float: method(v) this<v;

	),
"\xbf\x78\x74\x61\x6c\x01\x01\xe9\xf2\x68\xff\x30\x00\x00\x02\x4b\x01\x00\x01\xff\x00\x21\x06\x02\x1e\x02\xff\x03\xff\x1d\x01\x00"
"\x06\x00\x0c\x01\x00\xff\x03\x1b\x00\x06\x01\x00\x02\x3c\xff\x00\x01\x3c\x00\x00\x30\x02\x00\xff\x02\x4a\x00\x00\x05\x02\x08\x01"
"\x4a\xfa\xf4\x02\x02\x01\x1f\x07\x0f\x19\x0a\x08\x27\x03\x5d\x09\x19\x00\x51\x00\x04\xe7\xf4\x02\x00\x00\x48\xe6\xf5\x6b\x05\x63"
"\x01\x03\x00\x00\xf3\xf1\x34\xeb\xf0\x01\x06\x84\x02\x6d\x05\x6b\x09\x82\x00\xa7\x05\xeb\xf0\xf3\xf0\x86\x93\x05\x0a\x05\x7d\x01"
"\xff\xf0\xb7\x02\xc9\x02\x00\xc5\x3a\xc3\x00\x07\xc7\x0a\x9f\x08\xb4\x03\x00\x67\xfa\x84\x01\x0b\xeb\xf0\x11\x74\x6f\x6f\x6c\xff"
"\x2f\x74\x65\x6d\x70\x2f\x69\x6e\x9d\x2e\xee\xf1\x00\x0a\x0e\xea\xf1\x17\x11\x08\xff\x74\x6f\x70\x6c\x65\x76\x65\x6c\x7e\x17\x11"
"\x05\x46\x6c\x6f\x61\x74\x17\x11\xe7\x01\x76\x02\x2a\x11\x29\x12\x6f\x70\x5f\xd3\x65\x71\x39\x12\x39\x1a\x6c\x32\x12\x09\x66\xbf"
"\x69\x6c\x65\x6c\x6f\x63\x13\x10\x01\x03\x03\x03"
);
}

XTAL_BIND2(Class){
	Xemb((

Class::ancestors: method{
	if(this===Any){
		return null;
	}			
	
	return fiber{
		this.inherited_classes{
			yield it;
			it.ancestors{
				yield it;
			}
		}

		yield Any;
	}
}

Class::members_ancestors_too: method{
	return fiber{
		this.members{
			yield it;
		}

		this.ancestors{
			it.members{
				yield it;
			}
		}
	}
}
),
"\xbf\x78\x74\x61\x6c\x01\x01\xea\xf1\x02\xfb\x9a\x30\xf6\xf0\x4b\x01\x00\x01\x01\xff\x18\x06\x01\x30\x02\x00\x03\x20\xff\x01\x02"
"\x03\x1d\x00\x00\x06\x00\xbd\x0c\xf3\xf0\x3c\x00\x01\x4b\xf6\xf0\x00\xff\xf6\x06\x02\x38\x01\x02\x00\x04\x7f\x03\x36\x00\x02\x01"
"\x00\x05\x1c\x00\xff\x07\xfb\x00\x07\xfc\x01\x4d\x00\xf7\x01\x1d\xfb\x10\x00\x97\x07\x00\xfc\xfd\x3d\xeb\xf0\x01\x38\x01\xfc\x00"
"\x06\xbd\x02\x28\x07\xfd\x00\x07\xfe\x36\x00\x02\x7b\x1d\xfd\x10\x00\x26\x07\x00\xfe\x43\x02\xec\x28\x00\x58\x00\x00\x01\x56\x04"
"\x1d\xfd\xff\xff\xe9\x00\x09\x1b\xff\xe3\x4f\x00\xff\x33\x4e\x4d\x00\x03\x26\x00\x07\xff\xff\x00\x07\x01\xff\x37\x00\x01\xb7\xfd"
"\x00\x08\x00\x00\x00\x10\x0e\x00\x0c\xff\x00\x06\x07\x00\xff\x25\x00\x51\x7f\x4e\x37\x00\x00\xfd\x00\x09\xea\xf1\xc3\x10\x50\x28"
"\x00\x32\x00\x74\x01\x32\x02\x1d\xfb\xab\xff\x78\x81\x01\x72\x86\x03\x04\x8d\x08\xfb\xa4\x99\x0f\xab\x02\xfb\xb1\x05\xfa\xf0\x03"
"\x43\x02\x3c\xb4\x15\x02\x0d\x10\x4a\x0f\x01\x00\x01\xfa\xf4\x03\xbb\x01\x64\x1a\x00\x04\x01\x58\x20\x03\x0a\x44\x27\x08\x58\x04"
"\x05\x60\x0f\x72\x0f\x84\x05\x06\x8d\x0f\xa8\x9f\x0f\xb1\x05\x20\x03\x06\x27\x0f\x07\x3a\x02\x8f\x8a\x48\x01\x0a\x4d\x0f\x08\x47"
"\x1f\x59\x1f\x84\x05\x09\x50\x74\x1f\x86\x1f\xb1\x0f\xc3\x05\x80\x81\x01\x7a\x86\x03\xa1\x0a\xd8\x0f\xea\x0f\x29\x25\x0d\x19\x0b"
"\x1a\x13\x0c\x12\x17\x00\x51\x18\x11\xe9\xf2\x02\x2c\x00\xe6\xf5\x9d\x25\x95\x04\xeb\xf0\x03\x9e\x24\x20\xae\x22\x9f\x22\x01\x15"
"\x27\xeb\xf0\x0a\xc2\x24\x2d\xca\x26\xf3\xf2\x9a\x2c\x52\x9e\x23\x03\xe7\xf4\xf3\xf0\x05\xde\x24\x0a\x9f\x20\x88\xb5\x22\x01\x32"
"\xe8\xf3\x26\x19\x10\xc1\x22\x15\x37\x01\x11\x2d\x9f\x20\xcd\x22\x29\x38\x33\x19\x10\x38\x3b\x88\x20\xaa\xe1\xfa\xdb\xeb\xf0\xfe"
"\x45\x00\x0a\xeb\xf0\x90\x0a\xeb\xf0\xb3\xeb\xf0\xbf\xe7\xf4\x7a\x31\x7a\x31\xea\xf1\x54\x6e\x30\x6d\x32\x77\x45\x00\x9a\x45\x00"
"\xa6\xfb\x24\xac\x9e\x31\x9e\x30\x02\x53\xf6\xf0\x76\xf6\xf0\x82\x0a\xf6\xf0\x08\xf6\xf0\x2b\xf6\xf0\x25\x20\xf4\xf2\xc2\x31\x68"
"\xc2\x30\xf4\xf2\xb6\x31\x76\xde\x21\x02\x99\xec\x10\xfd\x01\x5a\x31\x11\x74\x6f\x6f\x6c\x2f\xff\x74\x65\x6d\x70\x2f\x69\x6e\x2e"
"\xce\xee\xf1\x00\x0d\x0e\xea\xf1\x01\x41\x08\x74\x7f\x6f\x70\x6c\x65\x76\x65\x6c\x01\x41\xbf\x05\x43\x6c\x61\x73\x73\x01\x41\x03"
"\xf7\x41\x6e\x79\x01\x41\x11\x69\x6e\x68\xff\x65\x72\x69\x74\x65\x64\x5f\x63\xfa\x19\x41\x65\x1c\x42\x0b\x62\x6c\x6f\x63\x7f\x6b"
"\x5f\x66\x69\x72\x73\x74\x01\x41\xff\x09\x61\x6e\x63\x65\x73\x74\x6f\x75\x72\x1c\x42\x0a\x40\x43\x6e\x65\x78\x4a\x42\xbe\x3f\x44"
"\x63\x61\x74\x63\x68\x3b\x48\x62\xef\x72\x65\x61\x6b\x01\x41\x07\x6d\x65\x57\x6d\x62\x65\x57\x43\x15\x8d\x44\x5f\x50\x46\x79\x5f"
"\xee\x30\x4b\x42\x66\x69\x6c\x65\x41\x40\x0e\xfd\x30\x01\x03\x03"
);

}

#ifndef XTAL_NO_THREAD

XTAL_BIND2(Mutex){
	Xemb((

Mutex::block_first: method{
	this.lock;
	return this;
}

Mutex::block_next: method{
	this.unlock;
	return null;
}

Mutex::block_break: method{
	this.unlock;
	return null;
}

),
"\xbf\x78\x74\x61\x6c\x01\x01\xe9\xf2\x76\xff\x30\x00\x00\x02\x4b\x01\x00\x01\x5f\x00\x19\x06\x00\x36\xea\xf1\x03\x00\x00\xff\x06"
"\x00\x3c\x00\x01\x3c\x00\x00\x7f\x4a\x00\x00\x04\x00\x00\x01\xfa\xf4\x17\x02\x00\x1a\x04\x04\x05\x00\x00\xf3\xf0\x11\x06\xa5\x06"
"\x1b\x07\x03\x26\x0f\x13\x04\x07\x1b\x03\x08\x12\x11\x00\x51\x2e\x00\xe8\xf3\x02\xe3\xf8\x79\x05\x1a\x00\x24\x0a\x00\xe8\xf3\x28"
"\x51\x02\xe8\xf3\x4d\xeb\xf0\x64\x00\x80\xeb\xf0\xf3\xf3\x77\x0b\x8c\x02\x90\x06\xf3\xf2\xf3\xf3\x0a\x10\x71\x00\x91\x02\xaf\x05"
"\xeb\xf0\x2e\x71\x00\x71\x02\xe5\x08\x41\x53\x71\x00\xa9\x02\xe5\x06\xe5\x08\xac\x04\x75\x30\x01\xfd\x0b\xeb\xf0\x11\x74\x6f\x6f"
"\x6c\x2f\xff\x74\x65\x6d\x70\x2f\x69\x6e\x2e\xce\xee\xf1\x00\x09\x0e\xea\xf1\x45\x11\x08\x74\x7f\x6f\x70\x6c\x65\x76\x65\x6c\x45"
"\x11\xbf\x05\x4d\x75\x74\x65\x78\x45\x11\x04\x6f\x6c\x6f\x63\x6b\x45\x11\x0b\x62\x66\x11\xbf\x5f\x66\x69\x72\x73\x74\x45\x11\x06"
"\xeb\x75\x6e\x66\x15\x0a\x6f\x13\x6e\x65\x78\xbc\x79\x12\x6e\x14\x62\x72\x65\x61\x69\x12\x09\xcf\x66\x69\x6c\x65\x66\x10\x41\x10"
"\x01\x03\x01\x03"
);

}

#endif



XTAL_BIND2(Stream){
	Xemb((

Stream::match: method(pattern){
	exec: xpeg::StreamExecutor(this);
	if(exec.match(pattern)){
		return exec;
	}
	return null;
}

Stream::scan: method(pattern) fiber{
	exec: xpeg::StreamExecutor(this);
	while(exec.match(pattern)){
		yield exec;
	}
}

Stream::parse: method(pattern){
	exec: xpeg::StreamExecutor(this);
	if(exec.parse(pattern)){
		return exec;
	}
	return null;
}

Stream::split: method(pattern) fiber{
	exec: xpeg::StreamExecutor(this);
	if(exec.match(pattern)){
		yield exec.prefix;
		while(exec.match(pattern)){
			yield exec.prefix;
		}
		yield exec.suffix;
	}
	else{
		yield this.to_s;
	}
}

Stream::chars: method fiber{
	while(!this.eos){
		yield this.get_s(1);
	}
}

),
"\xbf\x78\x74\x61\x6c\x01\x01\xea\xf1\x01\xff\xe5\x30\x00\x00\x02\x4b\x01\x00\xff\x01\x00\x38\x30\x01\x00\x05\x32\xbe\x00\x00\x06"
"\x06\x01\x34\xff\xff\xf0\x01\xff\x07\x01\xfe\x36\x00\x01\xff\x00\xfd\x07\x12\x00\x1d\x00\x00\x06\x00\x0c\x6f\x07\x00\xff\x3c\x12"
"\x00\x00\x00\x2a\x00\xdf\x3c\x00\x00\x4a\x00\x1c\x00\x00\x01\xfe\xfa\xf4\x02\x00\x59\x4b\x00\x00\x03\xab\x00\x4d\x04\x0e\x28\xf3"
"\xf0\x01\x18\x0b\x25\xf2\x27\x00\x3d\xf5\xf1\x5e\x0d\xff\xea\x00\x09\xa7\x1b\xff\xe4\x33\x00\x30\x06\x0a\x3a\x07\x04\xa4\x02\x0f"
"\x14\x06\x0d\x1e\x0f\x30\x06\x0d\x3a\x07\x05\x3b\x00\x96\x47\x00\x06\x00\x8a\x4d\x0f\x5f\x0f\x7f\x55\x38\x00\xff\x00\x10\x01\x75"
"\x0f\x52\xc7\x03\x28\x19\x1f\x81\x07\xe7\x8c\x01\xe1\x38\x11\xfd\x11\x3d\x13\x1b\x00\x10\x06\x01\x38\xa6\x00\x00\x12\x02\x3e\x12"
"\x91\x09\x13\x3a\x07\x07\xbb\x00\x47\x47\x00\x08\x00\x3b\x68\x13\x14\xb5\x02\xc8\x00\x2a\xb2\x01\x03\x02\x62\x01\x01\xcf\x00\x15"
"\x00\x02\x3d\x13\x95\x18\x09\xff\xaf\xe5\x1b\xff\xdf\x91\x09\x16\x3a\x03\x17\x12\x2a\x00\x51\x9c\x01\xe9\xf2\x02\x43\x00\xe6\xf5"
"\xe8\x15\xa5\x04\xeb\xf0\x03\x43\x00\xf3\xf1\x47\xeb\xf0\x08\xd4\x00\x00\xf3\xf1\x4d\x00\x00\x0a\x03\x22\x00\x00\x55\xab\xeb\xf0"
"\x0b\x01\x24\xee\xeb\xf0\x0e\x0d\x24\xb5\xf4\x00\x00\x10\x19\x23\x01\x8f\xeb\xf0\x14\xc6\xe8\xf3\x01\x95\x45\x26\x1a\x23\xe6\x1b"
"\x00\x09\x42\xea\xf1\x03\xe7\xf4\xf3\xf0\x02\x23\x9b\x00\x05\xfa\x11\x58\x02\x20\x7c\x22\x2b\x02\x00\x4d\x88\x20\x09\x0d\x21\x8c"
"\x25\x11\x94\x24\x53\x06\x16\x24\xa4\x23\xe9\xf2\xb1\xaa\x88\x20\x0c\x8c\x2c\xf4\x88\x20\x0f\xa0\x2c\xfa\x18\xb0\x20\x3c\x22\xb8"
"\x27\x01\x95\x88\x20\x48\x22\x5a\x25\xc6\xf6\xf0\x9b\x06\x01\x3d\x08\x37\x56\x24\x01\xe4\xfa\x0d\x21\x0b\xeb\xf0\x11\x74\x6f\x6f"
"\x6c\xff\x2f\x74\x65\x6d\x70\x2f\x69\x6e\x9d\x2e\xee\xf1\x00\x18\x0e\xea\xf1\x54\x31\x08\xff\x74\x6f\x70\x6c\x65\x76\x65\x6c\xfe"
"\x54\x31\x06\x53\x74\x72\x65\x61\x6d\xfe\x54\x31\x07\x70\x61\x74\x74\x65\x72\xf5\x6e\xea\x11\x05\x54\x31\x04\x78\x70\x65\xf5\x67"
"\x54\x31\x0e\x6b\x33\x45\x78\x65\x63\xef\x75\x74\x6f\x72\x54\x31\x05\x6d\x61\xe7\x74\x63\x68\x7d\x32\x7d\x37\x73\x63\x61\xfc\x7c"
"\x33\x7d\x36\x05\x70\x61\x72\x73\x65\xfe\xa8\x3b\x06\x70\x72\x65\x66\x69\x78\xee\x66\x32\x73\x75\x66\xe1\x34\x04\x74\x6f\xfb\x5f"
"\x73\x9e\x32\x73\x70\x6c\x69\x74\xee\x54\x31\x03\x65\x6f\xf7\x33\x67\x65\x74\xe6\xf6\x34\x63\x68\xcb\x30\x54\x31\x09\x66\x69\xdf"
"\x6c\x65\x6c\x6f\x63\x50\x30\x01\x03\x01\x03"
);

}

namespace debug{
	
XTAL_BIND2(Debug){
	Xemb((

debug::scope: singleton{
	op_call{
		return this;
	}

	block_first{
		debug::enable();
		return this;
	}

	block_next{
		debug::disable();
		return null;
	}

	block_break{
		debug::disable();
	}
}
	),
"\xbf\x78\x74\x61\x6c\x01\x01\xe9\xf2\xb4\xdf\x30\x00\x00\x02\x47\xfb\xf0\x01\x02\xdf\x00\x01\x03\x01\x49\xeb\xf0\x08\x03\xf7\x00"
"\x02\x4b\x03\x00\x00\x0e\x06\x00\xdf\x3c\x00\x01\x3c\x00\x04\x03\x01\x00\xfd\x09\x0d\x03\x02\x00\x1d\x30\x01\x00\xdb\x02\x32\x12"
"\x00\x0b\x34\xeb\xf0\x01\x00\xee\x16\x0a\x02\x00\x0a\x0d\x03\x03\x00\x1e\xe2\x2f\x05\x0d\x38\x03\xf3\xf0\x18\x08\x03\x00\x0c\xce"
"\x0d\x03\x04\x00\x18\x57\x0c\x1b\x05\x04\x00\xfd\x0e\x0d\x00\x48\x01\x4a\x00\x00\x0f\x74\x1c\x00\xfa\xf0\x10\x18\x00\x51\x00\x07"
"\xe7\xf4\xe9\x02\xe3\xf8\xb7\x05\x04\xeb\xf0\x03\x00\x05\xae\xd0\x00\x00\x00\x16\xeb\xf0\x0a\xe7\xf4\x2f\xaa\xeb\xf0\x0b\xe7\xf4"
"\x57\xeb\xf0\x0d\xe7\xf4\x80\x28\xeb\xf0\xa2\x00\xb4\x04\x04\xb7\x00\x08\xeb\xf0\xd3\x01\x80\x0d\x11\xb0\x0f\x0f\x13\x53\x00\xe8"
"\xf3\xf3\xf2\xf3\xf3\x1c\x28\xd3\x00\xdb\x02\xf3\xf2\x09\xe9\xf2\x35\xd3\x00\xe7\x02\x44\xf3\xf2\xdb\x03\x5d\xd3\x00\xf3\x02\xf3"
"\xf2\x0c\xe9\xf2\x11\x86\xd3\x00\xff\x02\xf3\xf2\x0e\x3c\x16\xe6\xf5\xf3\xf1\xf9\xb3\x63\x01\xe7\x01\x11\x74\x6f\x6f\x6c\xff\x2f"
"\x74\x65\x6d\x70\x2f\x69\x6e\xcd\x2e\xee\xf1\x00\x11\x8f\x11\x8e\x12\x08\x74\x7f\x6f\x70\x6c\x65\x76\x65\x6c\x8f\x11\xbf\x05\x64"
"\x65\x62\x75\x67\x8f\x11\x0f\xff\x61\x75\x74\x6f\x5f\x69\x6e\x69\x7f\x74\x69\x61\x6c\x69\x7a\x65\x8f\x11\x7f\x07\x6f\x70\x5f\x63"
"\x61\x6c\xd3\x12\xff\x0b\x62\x6c\x6f\x63\x6b\x5f\x66\xaf\x69\x72\x73\x74\x8f\x11\x0a\x03\x23\x6e\xf3\x65\x78\x0d\x22\x02\x24\x62"
"\x72\x65\x61\x55\x6b\xb7\x01\x05\xb7\x01\x06\xb7\x01\x07\x8f\x11\x7f\x06\x65\x6e\x61\x62\x6c\x65\xb7\x01\x5d\x08\xf2\x12\x64\x69"
"\x73\x43\x25\x09\xd4\x12\xef\x73\x63\x6f\x70\xf1\x12\x09\x66\x69\x73\x6c\x65\x04\x20\xbe\x10\x01\x03\x03"
);
}

}

XTAL_BIND2(Iterator){
	Xemb((

Iterator::to_fiber: method(){
	return fiber{
		this{
			yield it;
		}
	}
}

Iterator::scan: method(pattern) fiber{
	exec: xpeg::IteratorExecutor(this);
	while(exec.match(pattern)){
		yield exec;
	}	
}

Iterator::ip: method(n:3){
	m: MemoryStream();
	m.put_s("<[");
	a: this.take(n+1)[];
	m.put_s(a.take(n).join(","));
	if(a.length==n+1){
		m.put_s(" ...]>");
	}
	else{
		m.put_s("]>");
	}
	m.to_s.p;
	return chain(a.each, this);
}

Iterator::op_to_array: method{
	ret: [];
	this{
		ret.push_back(it); 
	}
	return ret;
}

Iterator::op_to_map: method{
	ret: [:];
	this{ |key, value|
		ret[key] = value; 
	}
	return ret;
}

Iterator::join: method(sep: ""){
	ret: MemoryStream();
	if(sep==""){
		this{
			ret.put_s(it.to_s);
		}
	}
	else{
		this{
			if(!first_step){
				ret.put_s(sep);
			}
			ret.put_s(it.to_s);
		}
	}
		
	return ret.to_s;
}

Iterator::with_index: method(start: 0) fiber{
	i: start;
	this{
		yield i, it;
		++i;
	}
}

Iterator::collect: method(conv) fiber{
	this{
		yield conv(it);
	}
}

Iterator::map: Iterator::collect;

Iterator::select: method(pred) fiber{
	this{
		if(pred(it)){
			yield it;
		}
	}
}

Iterator::filter: Iterator::select;

Iterator::break_if: method(pred) fiber{
	this{
		if(pred(it))
			break;
		yield it;
	}
}

Iterator::take: method(times){
	if(times<=0){
		return null;
	}

	return fiber{
		i: 0;
		this{
			yield it;
			i++;

			if(i>=times){
				break;
			}
		}
	}
}

Iterator::zip: method(...args){
	return builtin::zip(this, ...args);
}

Iterator::chain: method(...args){
	return builtin::chain(this, ...args);
}

Iterator::cycle: method fiber{
	temp: [];
	this{
		temp.push_back(it);
		yield it;
	}
	
	for(;;){
		temp{
			yield it;
		}
	}
}

Iterator::max_element: method(pred: null){
	item: null;
	if(pred){
		this{
			if(item){
				if(pred(it, item))
					item = it;
			}
			else{
				item = it;
			}
		}
		return item;
	}

	this{
		if(item){
			if(item<it)
				item = it;
		}
		else{
			item = it;
		}
	}
	return item;
}

Iterator::min_element: method(pred: null){
	item: null;
	if(pred){
		this{
			if(item){
				if(pred(it, item))
					item = it;
			}
			else{
				item = it;
			}
		}
		return item;
	}

	this{
		if(item){
			if(item>it)
				item = it;
		}
		else{
			item = it;
		}
	}
	return item;
}

Iterator::find: method(pred){
	this{
		if(pred(it)){
			return it;
		}
	}
}

Iterator::inject: method(init, fn){
	result: init;
	this{
		result = fn(result, it);
	}
	return result;
}

Iterator::with_prev: method fiber{
	prev: undefined;
	this{
		yield prev, it;
		prev = it;
	}
}

	),
"\xbf\x78\x74\x61\x6c\x01\x01\xea\xf1\x0c\xff\xe1\x30\x00\x00\x02\x4b\x01\x00\xef\x01\x00\x82\x4b\xfb\xf0\x00\x76\x06\x7f\x01\x36"
"\x00\x02\x01\x00\x03\x06\x00\xff\x07\xfd\x00\x07\xfe\x01\x4d\x00\xff\x01\x1d\xfd\x00\x06\x00\x26\x07\xe7\x00\xfe\x3d\xeb\xf0\x0b"
"\x01\xfd\x00\x04\xfc\x00\x00\x15\x03\x1d\xfd\xff\xe9\x00\x09\xff\x1b\xff\xe3\x4f\x00\x33\x4e\x4d\xff\x00\x02\x26\x00\x07\xff\x00"
"\x07\xff\x01\xff\x37\x00\x01\xfd\x00\x05\xed\x00\xf2\xf0\x10\x1d\xf6\xf0\x00\x06\x07\xff\x00\xff\x25\x00\x51\x4e\x37\x00\xf9\x00"
"\x1f\x01\xeb\xf0\x10\x50\x3c\x00\x00\xf7\x3c\x00\x01\x77\x00\x4a\x00\x00\x07\xdc\x29\x00\xfa\xf4\x03\x00\x59\x04\x00\x04\x00\xbf"
"\x4d\x30\x01\x00\x0a\x32\x00\x00\x0b\x6f\x06\x01\x34\xff\xff\xf0\x01\x28\xf3\xf0\xb6\x0b\x00\x01\xff\x60\x00\x01\x01\x5e\x00\x06"
"\x63\x00\x25\x64\x00\x27\x02\xa8\x0d\xff\xea\x3f\x01\xf5\xe4\x77\x09\x0d\x84\x07\x05\x00\xaf\x23\xde\x1f\x01\x09\x03\xfd\x03\xfa"
"\xf0\x10\x34\xf5\xfe\xff\xf1\x02\x29\x00\x39\xfe\x00\x11\xff\x00\x06\x01\x03\x03\x01\x0d\x02\xef\xfd\x03\x04\x00\xad\x00\x01\x00"
"\x12\xfe\x0d\x00\x38\xff\x00\x00\x13\x01\x07\xcf\x02\xfd\x36\x01\xaf\x00\x21\x11\x02\x02\x4b\x00\x02\x1c\x12\x14\x0d\x00\x0c\x12"
"\x38\xaf\x00\x7b\x15\x02\x13\x16\x1e\x01\x02\x03\xb6\x02\x75\x12\x08\x10\x03\x0c\x12\x1b\x00\x0c\x08\x10\x3d\x04\x44\x13\x00\xfe"
"\x00\x16\x0b\x00\xeb\xf0\xf9\x17\x00\x00\x97\x00\x18\x38\x02\xff\x00\xdf\x19\x03\x06\x03\x34\x59\x00\x02\x02\xfa\x7a\x06\x1a\x84"
"\x07\x06\x00\x7e\x42\xfc\x36\x0a\x0f\x00\x03\x1e\x06\x39\xfc\x6a\x10\x2c\x0f\xe2\x3e\x09\x04\x4b\x0f\x5d\x0f\x6f\x05\x07\x00\xfc"
"\xfa\x7a\x06\x13\x84\x07\x07\x00\x81\x44\xfb\xea\xb1\x11\x03\x0f\x04\xfc\x14\x00\x01\x07\xfe\xbf\x02\x4d\x00\x05\x1d\xfc\x20\x01"
"\x1a\x37\xfb\xfd\xfe\x1b\x10\x03\xfc\xd7\x13\x46\x25\x2b\x1d\xfc\x3d\x0a\x06\xf2\x18\xfc\xfe\x1f\x69\x02\xd4\x52\x21\x19\x24\xfb"
"\x7a\x06\x1c\x84\x07\x08\x01\xf7\x2b\x23\xfb\x20\x00\x0a\x02\xfb\x00\xe5\x05\xfe\x02\xfc\x04\x12\xf0\x00\x1e\xfb\x01\xb5\x02\xb6"
"\x02\x79\xb1\x1f\x00\x07\x1e\x02\x29\xb4\x77\x13\xce\x10\x11\xd2\x1f\xff\xe6\x3f\x01\xe0\xe2\x44\x03\x08\xf2\x1f\x04\x2f\x6f\x05"
"\x1b\x00\x87\xde\xe6\x2f\x00\x09\x01\xff\xc4\x13\x3a\x1d\x17\xff\x00\x0e\x41\x31\xfb\x06\x32\x00\x3f\xda\x15\x57\x01\xff\x02\x3b"
"\x00\xd5\x3f\x01\xcf\x44\x03\x51\x0a\x2a\x3f\x3c\x3f\x6f\x05\x38\xa0\x20\x16\x7c\x00\x7a\x7c\x04\x14\x84\x07\x09\x00\x97\x23\x52"
"\x21\xf9\x09\x5e\x20\x04\x00\x0a\x00\x82\x28\xfc\xac\x29\x00\x59\x3f\x00\x0b\x1e\x02\x2d\x1e\x20\x07\xbd\x01\x26\x02\x02\x08\xfc"
"\xfc\x0a\x3f\xff\x15\xe2\x3f\x01\xdc\x44\x03\x0c\xb1\x3f\xc3\x3f\x6f\x0f\x77\x00\x00\x21\x84\x07\x0b\x00\x8d\x04\x00\xb7\x0c\x00"
"\x81\x0e\x4f\x00\x0d\x1e\x02\x31\x2e\xa8\x02\x07\x02\xfe\x92\x12\x01\x27\x0f\x39\x02\x15\xde\x3f\x01\xd8\x44\x03\x0e\x56\x4f\x68"
"\x4f\x7a\x4f\xd7\x00\x00\x24\x84\x04\x30\x38\x10\x32\x01\xd7\x02\x00\x24\x80\x00\x25\x84\x07\x0d\x00\xdd\x96\x04\x00\x0e\x00\x8a"
"\xa2\x4f\x00\x0f\x88\x70\x33\xbc\x4b\xb6\x02\x0e\x24\x0f\xdd\x15\xa4\x39\x10\xb8\xee\x4f\x00\x5f\x12\x5f\x00\x00\x28\x27\x5c\x28"
"\xba\x80\x00\x29\x84\x07\x0f\x00\x99\x04\x00\x10\x5b\x00\x8d\x4e\x5f\x00\x11\x1e\x02\x3d\x68\x5e\x4d\x29\x3f\x00\x00\x23\x7c\x5f"
"\xdd\x15\xd2\x3f\x01\xc5\xcc\x44\x03\x12\xa3\x5f\xb5\x5f\xc7\x5f\x00\x00\xdd\x2c\x84\x07\x11\x00\xae\x3e\x20\x1f\x01\xc1\xfc\xdf"
"\x21\x71\x60\xf3\xf0\x7a\x00\x04\x00\x12\x00\x59\x8f\x5e\x20\x03\x6f\x00\x13\x1e\x02\x3c\x34\x65\xec\x33\x41\xa8\x02\x1f\xfc\xde"
"\x22\x09\x00\x21\x57\x1b\x00\x1b\x3c\x6f\xd3\x3f\x01\xcd\x44\x03\xc1\x14\x5b\x6f\x6d\x6f\x7f\x6f\xb5\x61\x85\x06\x13\x00\xf5\x23"
"\x2e\x50\x31\x32\x51\x32\x06\x02\x07\x47\x03\xff\x35\x22\x71\x0e\x00\xe2\x37\x32\x84\x07\xa5\x14\x58\x77\x18\x63\x7f\x7e\x02\x18"
"\x84\x07\x15\x3b\x00\xfa\x04\x00\x16\x00\xee\xaf\x1f\x1a\x00\x45\x15\x1e\x02\x2e\xcb\x15\x34\x6f\xdd\x15\xe1\x3f\x01\x85\xdb\x44"
"\x03\x16\x14\x7f\x26\x7f\x38\x75\x0c\x00\xfc\x1c\x10\x00\xda\x15\x4d\x00\x17\x1e\x0f\xd7\x1f\x42\x05\xb1\x18\x07\x8f\x19\x8f\x4e"
"\x36\xff\x95\x77\x09\x35\xba\x84\x07\x17\xc2\x24\x09\x01\xfb\x87\x21\x1d\x5a\xc5\x21\x92\xbe\x7f\x00\x19\x45\x82\x3f\x51\x22\x9d"
"\x1e\x2b\x40\x07\x02\xfc\x92\x10\xdd\x25\x0f\x6f\x07\xfc\xfe\x1b\x89\x80\xfc\xfe\x53\x8f\x15\xd0\x3f\x01\xca\x44\x03\x1a\x72\x8f"
"\x84\x8f\x16\x2b\xd6\xcd\x8f\x00\x1b\x45\x82\x37\x51\x22\x16\x1f\x51\xfc\x39\x00\xfa\x8f\x57\x8b\xd8\x3f\x01\xd2\x44\x03\x91\x1c"
"\x27\x9f\x39\x9f\x16\x2f\x00\x76\x10\x85\x06\x18\x08\xb9\x8f\xcb\x8f\x1a\x00\x1d\xe1\x8f\xf3\x8f\x89\x9f\x17\x9c\xa1\x1e\xab\x9f"
"\xbd\x9f\x4b\x9f\x0e\x0c\x1f\x6d\x9a\xfe\x11\xfc\x7c\x9f\x8e\x9f\xa0\x97\x20\x5d\xaf\x6f\xaf\xcf\x9f\x97\x00\x00\x3b\x84\x07\x19"
"\x57\x3f\x1a\x00\x21\xa8\x6d\x93\x2b\x40\x92\x10\xfc\xb4\x04\x10\x4b\x80\x4f\x47\x00\x04\x4e\x7a\x00\xc2\xaf\x9e\x99\x22\xe1\xaf"
"\xe8\xf3\xaf\x38\x78\x80\x00\x3e\x84\x07\x1a\x00\x83\xb7\x07\xfc\xfa\x27\xbf\x00\x23\x45\x82\x2a\xa4\x28\x43\xd2\x20\xfb\x39\x11"
"\x55\x8d\xe5\x3f\x01\xdf\xe2\x44\x03\x24\x79\xbf\x8b\xbf\x05\xbf\x00\x00\x43\xee\x84\x07\x1b\x00\x8b\x04\x00\x1c\x00\x7f\x2c\x46"
"\xb0\xbc\xbf\x00\x25\x45\x82\x2c\x28\x48\xbf\xaf\x2a\x3b\x00\xe3\x3f\x01\xdd\x44\x03\x26\x01\xcf\x13\xcf\xae\x38\x7f\x00\x00\x44"
"\x84\x03\x45\x7a\x00\x51\x4b\x00\x1e\xe7\xf4\x02\xbb\xc3\xdf\xca\x04\xeb\xf0\xa9\x03\x10\x00\xea\xf1\x0a\xf9\xc8\x91\xeb\xf0\x08"
"\xd4\x00\x00\xf3\xf1\x97\x00\x00\x0a\x17\xd2\x00\x00\x75\xf5\xeb\xf0\x0e\x37\x82\x00\x01\xaf\xeb\xf0\x4d\x1b\xf7\xc2\x00\x02\xe3"
"\x90\xb5\x20\x05\xe0\xc2\xa5\xc4\xeb\xf0\x1d\xa3\xc1\x63\x10\xfa\xeb\xf0\x1f\xae\x57\x82\x00\x04\x09\x00\x00\x21\x39\xd3\x04\xb5"
"\x9c\xeb\xf0\x22\x2d\xd3\x04\xa2\x00\x00\x24\xd6\xfd\xc3\x05\x48\xeb\xf0\x26\x2d\xd3\x05\x4e\xaa\x00\x00\x28\x81\xd4\xfd\xeb\xf0"
"\x2a\x2d\xd3\x06\x5a\x38\x81\x2c\xfd\xc3\x06\xa1\xeb\xf0\x2d\x5d\xd3\x6b\x06\xba\x00\x00\x2f\x39\xd3\x07\x5a\xeb\xf0\xad\x2f\x15"
"\xd3\x07\x88\xeb\xf0\x33\xd5\xd4\xb6\x6a\xeb\xf0\x35\xc9\xd4\xbc\xe9\xd7\x08\xbb\xeb\xf0\xad\x36\x51\xd3\x09\xf1\xeb\xf0\x39\x51"
"\xd3\x0b\xb5\x27\xeb\xf0\x3c\x5d\xd3\x0b\xb9\xeb\xf0\x3f\xac\x47\x80\x08\x10\x0c\x47\xeb\xf0\x44\x39\xd3\x0c\x01\x4d\x31\xe6\x22"
"\xd3\xe2\xcb\x4f\xd0\xf9\xc2\xe8\xf3\xa8\xd1\x42\x21\xd4\x0a\x46\xd0\xfc\xc2\x54\xd1\xe7\xf4\x10\xbc\xc0\x82\x77\xed\x97\x46\xd0"
"\x64\xd1\xf2\xf1\xa9\x01\xf3\xf1\x9d\x50\xad\x60\x20\xd2\xa4\xe3\xe9\xf2\xfb\x46\xd0\x0f\x37\x81\x84\x7c\xe4\xa9\x01\xb5\x46\xd0"
"\x38\xd2\x60\xd1\x48\xe4\x3e\x50\x46\xd0\x44\xd2\x90\xd1\x48\xe4\xca\x46\xd0\x1e\xa3\xc3\x88\x45\xd2\xe0\xe2\x46\xd0\x20\x57\x81"
"\xe0\xe4\x60\xd1\x0f\x58\xad\x60\x68\xd2\xe0\xe7\x04\xa2\x46\xd0\x23\xc8\xe7\x62\x1b\xf2\xa8\xad\x60\x80\xd2\x7c\xe7\x05\x4e\x46"
"\xd0\x8d\x27\x40\xfb\x05\x54\xad\x60\x98\xd2\x7c\xe7\x06\x35\x03\x46\xd0\x2b\x40\xfb\x06\x09\xad\x60\xb0\xd2\x4a\x80\xf8\xa7\x46"
"\xd0\x2e\x18\xf7\x9a\xf2\xc0\xad\x60\xfc\xc8\xd2\xe0\xe7\x07\x60\x05\x02\x00\x30\x44\xa0\xe7\xcb\xd2\x8e\xdc\xf0\x92\x10\xe2\xfa"
"\xbc\x46\xd0\x64\xec\xd2\xd0\xf8\xc2\xbc\xc0\x07\x0c\x08\xc1\x46\xd0\xad\x37\x04\xfb\x09\xf7\x46\xd0\x3a\x04\xfb\x0b\xb5\x2d\x46"
"\xd0\x3d\xb8\xfb\x0b\xbf\x46\xd0\x41\x04\x29\xe1\x68\xe2\x00\x37\x10\x3a\xe0\x46\xd0\x34\xe2\xe0\xe7\x43\x0c\x53\xbc\xc0\x7f\x0b"
"\x18\xe1\xa2\x09\x4e\x3d\xe0\x45\x71\x3d\xe0\x7d\x54\xe4\xb5\x01\xb5\x00\x01\x28\xd0\x85\x02\xa8\x70\x02\x26\x50\xe0\xc2\xcd\x01"
"\xcd\x01\x81\x8a\xe8\xe0\xa4\xe8\xe0\xb0\x48\xe4\xe5\x01\xe5\x00\x03\x15\x2d\x63\x10\x50\x63\x10\x5c\x55\xe3\xfc\x02\xfd\x01\x15"
"\xb4\x63\x10\xd7\x63\x10\xe3\x02\x14\x15\x11\x15\x10\x0b\x04\x59\x10\xf0\x7c\x10\xf0\xdc\xd1\xf5\xc1\x2d\x11\x34\x2d\x11\x0c\xe0"
"\x05\xec\x30\x05\x20\x5c\xf4\x45\x11\x2a\x45\x11\xa6\x85\xd0\xc9\x85\xd0\xd5\x5c\xf4\x5d\x11\x66\x5d\x10\x06\x5e\xc4\xf0\xe1\x00"
"\x06\x8d\x84\xf4\xac\x75\x11\xe1\x00\x07\x17\xcd\xd0\x3a\xcd\xd0\x46\xa8\xd4\xf4\x8d\x11\x8d\x10\x08\x04\xd0\x08\xf9\x00\x08\x51"
"\x39\x24\x04\xa5\x11\xa5\x11\x75\x12\xd0\x98\x12\xd0\x30\xe5\x00\xfb\xd2\xbd\x11\xbd\x10\x09\x2a\xed\x60\x3c\xe0\xa1\x09\x29\x10"
"\x57\xe1\xd4\x12\xd5\x11\xae\xed\x60\xd1\x62\xed\x60\xdd\xda\x14\xed\x11\xed\x10\x0a\x60\x04\x40\x45\x83\x04\x40\x8f\x55\xe3\x04"
"\x22\x05\x21\xe4\x15\xe0\x85\x07\x15\xe0\x13\x55\xe3\x1c\x22\x1d\x21\x2d\x10\x0b\x45\x9f\x15\xe0\xab\x22\x24\x35\x21\x35\x20\x0c"
"\xf8\xc0\x8d\x0c\x18\xe0\x0c\x33\x88\x04\x4d\x21\x4d\x21\x9a\x42\x39\xe0\xbd\x39\xe0\x5d\x10\x37\xe2\x65\x21\xbd\x17\xd1\xeb\x0c"
"\xe0\xa0\xe1\x0b\x3d\xe0\x11\x74\x6f\xff\x6f\x6c\x2f\x74\x65\x6d\x70\x2f\xff\x69\x6e\x2e\x78\x74\x61\x6c\x00\xf3\x46\x0e\x57\xe1"
"\x98\x21\x08\x74\x6f\x70\xdf\x6c\x65\x76\x65\x6c\x9d\x22\x49\x74\xbf\x65\x72\x61\x74\x6f\x72\x98\x21\x0b\xff\x62\x6c\x6f\x63\x6b"
"\x5f\x66\x69\xd7\x72\x73\x74\x98\x21\x0a\xbc\x23\x6e\x65\xf9\x78\xc6\x22\xbb\x24\x63\x61\x74\x63\x68\x3e\xb7\x28\x62\x72\x65\x61"
"\x6b\x9d\x24\xc1\x20\x7b\x62\x65\xb6\x22\x07\x70\x61\x74\xb0\x20\xed\x6e\x2c\xe0\x00\x0a\x98\x21\x04\x78\x70\xeb\x65\x67\x98\x21"
"\x10\xaf\x25\x45\x78\x65\xdb\x63\x75\xb4\x24\x05\x6d\xe2\x25\x04\x73\x57\x63\x61\x6e\x98\x21\x01\x0e\x32\x0f\x98\x21\xff\x0c\x4d"
"\x65\x6d\x6f\x72\x79\x53\xf5\x74\xf2\x20\x6d\x32\x32\x70\x75\x74\x5f\xbd\x73\x14\x32\x74\x61\x6b\x65\xb7\x22\x6f\xfb\x70\x5f\xfb"
"\x20\x61\x72\x72\x61\x79\xee\x14\x32\x6a\x6f\x69\x44\x32\x06\x6c\x65\xc7\x6e\x67\x74\x3b\x33\xfb\x20\x6a\x32\x01\x70\xee\x32\x32"
"\x63\x68\x61\x8b\x33\x04\x65\x61\xf6\xe4\x23\x02\x69\xa6\x32\x09\x70\x75\x73\x5f\x68\x5f\x62\x61\x63\xf5\x22\x09\x79\x33\x7b\x6d"
"\x61\xa6\x32\x03\x73\x65\x70\x0f\x31\x7d\x1d\x32\x32\x73\x74\x61\x72\x74\x0f\x31\xfd\x1e\xc7\x22\x77\x69\x74\x68\x5f\x69\xef\x6e"
"\x64\x65\x78\x14\x32\x63\x6f\x6e\xf5\x76\x0f\x31\x20\x03\x32\x63\x6f\x6c\x6c\xeb\x65\x63\xc6\x22\x03\xda\x34\x04\x70\x72\x6b\x65"
"\x64\x0f\x31\x23\x8d\x32\x73\x65\x1e\x45\x8f\x06\x66\x69\x6c\xb0\x20\x33\x42\x33\x46\x08\xee\xf1\x22\x5f\x69\x66\x32\x32\x74\x69"
"\x6d\xeb\x65\x73\x0f\x31\x27\x14\x32\x61\x72\x67\x9a\x6e\x42\x28\x03\x32\x62\x75\x49\x40\x8b\x33\x03\xeb\x7a\x69\xe4\x32\x28\x7d"
"\x46\x05\x63\x79\xf7\x63\x6c\x65\x4e\x4b\x0b\x6d\x61\x78\x9d\x5f\x3e\x40\x6d\x65\x6e\xf3\x32\xae\x49\x69\xc9\x6e\xbc\x4f\x14\x32"
"\x66\x03\x40\x14\x32\x69\x6e\xad\x69\xc6\x22\x02\x66\x0e\x32\x2f\x0f\x31\x30\x2e\x8d\x32\x69\x6e\x6a\x1f\x44\x09\xfe\x32\x2f\x40"
"\xc9\x76\xc1\x32\x48\x40\x65\xbd\x20\x94\x20\x06\x03\xd6\xba\x32\x3c\x5b\x45\x32\x2c\x80\x21\x06\x20\xdf\x2e\x2e\x2e\x5d\x3e\xba"
"\x32\x5d\x3e\x06\x0f\x31\x02\x03"
);

	Xfor3(primary_key, secondary_key, value, it->members()){
		XTAL_UNUSED_VAR(value);
		if(!XTAL_detail_raweq(Xid(p), primary_key) && !XTAL_detail_raweq(Xid(each), primary_key)){
			cpp_class<Iterable>()->def(unchecked_ptr_cast<ID>(primary_key), xnew<DelegateToIterator>(unchecked_ptr_cast<ID>(primary_key)), secondary_key, 0);
		}
	}	
}

XTAL_BIND2(CompileError){

	Xemb((
builtin::CompileError::initialize: method(message, errors:[]){
	Exception::initialize(%f"%s\n%s"(message, errors.join("\t\n")));	
}
	),
"\xbf\x78\x74\x61\x6c\x01\x01\xe9\xf2\x52\xff\x30\x01\x00\x02\x32\x00\x01\x00\xf7\x03\x4b\x01\xff\xf0\x3a\x23\xff\x00\x5f\x06\x00"
"\x08\x42\xff\xfa\xf0\x08\xfe\xf1\xff\x09\x02\x02\x00\x01\x07\x03\xfe\xff\x02\x05\x00\x02\x36\x04\x01\xff\xff\x00\x0a\x00\x05\x01"
"\x34\x01\x01\xef\x02\x03\x02\x34\xeb\xf0\x01\x01\x3c\xbf\x00\x00\x4a\x00\x00\x09\x36\x00\x30\xff\x00\x00\x0b\x3c\x00\x01\x51\x00"
"\x85\x03\xe7\xf4\x02\x54\x00\xe6\xf5\x55\x05\x40\x00\x00\x01\x04\x54\x02\xf3\xf3\x53\x0b\x56\x03\x4d\x05\xf3\xf0\x71\x05\xc7\x0f"
"\x05\x00\x0b\x00\x55\x00\x95\x02\x00\x01\x6c\x71\x07\x8f\x06\x00\x51\xff\xf0\x01\x0b\xeb\xf0\xff\x11\x74\x6f\x6f\x6c\x2f\x74\x65"
"\xbf\x6d\x70\x2f\x69\x6e\x2e\xee\xf1\x00\xf3\x0c\x0e\xea\xf1\xe1\x01\x08\x74\x6f\x70\xdf\x6c\x65\x76\x65\x6c\xe1\x01\x07\x62\xbf"
"\x75\x69\x6c\x74\x69\x6e\xe1\x01\x0c\xff\x43\x6f\x6d\x70\x69\x6c\x65\x45\xef\x72\x72\x6f\x72\xf3\x02\x6d\x65\x73\x6f\x73\x61\x67"
"\x65\xe1\x01\x06\x65\x0c\x11\xd5\x73\x57\x01\x06\x57\x01\x07\xe1\x01\x09\x45\x7f\x78\x63\x65\x70\x74\x69\x6f\xfe\x02\xff\x0a\x69"
"\x6e\x69\x74\x69\x61\x6c\xbb\x69\x7a\x1b\x12\x04\x6a\x6f\xfd\x03\x09\xdd\x66\x08\x10\x6c\x6f\x63\xdd\x00\x03\x03\x7e\xc9\x01\x05"
"\x25\x73\x0a\x25\x73\xe1\x01\x0f\x02\x09\x0a\x03"
);
}

XTAL_BIND2(Builtin){
	Xemb((

builtin::chain: fun(...args){
	return fiber{
		args.ordered_arguments{
			it{
				yield it;
			}
		}
	}
}

builtin::range: fun(first, last, step:1){
	if(step==1){
		return fiber{
			for(i:first; i<last; i++){
				yield i;
			}
		}
	}
	else{
		return fiber{
			for(i:first; i<last; i+=step){
				yield i;
			}
		}
	}
}

builtin::forever: fun fiber{
	i: 0;
	while(true){
		yield i;
		++i;
	}
}

	),
"\xbf\x78\x74\x61\x6c\x01\x01\xea\xf1\x01\xff\xf5\x30\x00\x00\x02\x4b\x01\x00\xef\x01\x00\xee\x4b\xfb\xf0\x00\xe2\x28\xfd\x02\xf6"
"\xf0\x38\x01\x02\x00\x05\x03\xbf\x36\x00\x02\x01\x00\x06\x06\x00\x07\xff\xfb\x00\x07\xfc\x01\x4d\x00\x01\xab\x1d\xfb\x19\x00\x89"
"\x15\x00\xfc\x19\x00\x01\xbf\x00\x07\xfd\x00\x07\xfe\x23\x00\x02\xfb\x1d\xfd\x19\x00\x26\x07\x00\xfe\x3d\xf0\xf5\xf1\x15\x00\x37"
"\x00\x33\x06\x1d\xfd\xff\xe9\xff\x00\x09\x1b\xff\xe3\x4f\x00\x33\xff\x4e\x4d\x00\x03\x26\x00\x07\xff\xff\x00\x07\x01\xff\x37\x00"
"\x01\xfd\xf7\x00\x08\x00\xf2\xf0\x10\x1d\x00\x00\xff\x0c\x00\x06\x07\x00\xff\x25\x00\xff\x51\x4e\x37\x00\x00\xfd\x00\x09\x86\xea"
"\xf1\x10\x50\x15\x00\x1f\x00\x33\x01\x1f\x02\x1d\x57\xfb\xff\x86\x60\x01\x80\x65\x03\x04\x6c\x08\xe9\xfb\x78\x0f\x8a\x02\xfb\x90"
"\x05\x3c\x00\x00\xf7\x3c\x00\x01\xe3\x00\x4a\x00\x00\x0a\x7c\xf6\xf0\xfa\xf4\x03\x00\xa5\x23\xff\x19\x00\xff\x09\x03\xff\x01\x03"
"\x01\x01\x1e\x77\xff\x01\x02\x7f\x00\x06\x00\x47\x04\x00\x5f\x04\x00\x3b\x28\xff\xf6\xf0\x28\xff\xf0\xcb\x01\x1f\x0a\x15\x24\x85"
"\x00\x48\x02\x08\xff\x5b\xff\x00\x1e\x18\xff\xeb\x60\x01\xe5\xe3\x03\x77\x1b\x00\x48\x04\x00\x05\x00\x42\x19\x1f\x6b\x00\x2b\x2d"
"\x15\x28\xfb\xf0\x01\x0d\x36\x10\xad\x01\x1d\x19\xff\xe4\x60\x01\xde\xe3\x09\x11\xee\xf0\x07\x06\x00\x39\x04\x00\x07\x00\x2d\x2d"
"\x03\x7d\x10\x00\x03\x0d\x12\x1e\x2d\x19\xb6\x12\xab\xff\xf1\x60\x01\xeb\xe3\x09\x12\xf0\x03\x13\x82\xe6\x00\x51\x90\x03\xeb\xf0"
"\x11\x00\xe5\xf6\xf8\x15\x04\x52\xeb\xf0\x03\x56\x10\xf3\xf1\x0a\x00\x00\x05\xf9\x14\x55\xfd\xeb\xf0\x0b\xf9\x00\x03\xf6\xf0\x19"
"\x00\x00\x5d\x11\x13\x22\x00\x01\x5a\x31\x28\xad\xeb\xf0\x05\x12\x35\x24\xb3\x49\x26\xf3\xf2\xf5\x1c\xc3\x00\x0d\x22\x30\xe8\xf3"
"\xf3\xf0\x12\x23\xed\x00\x03\x02\x15\x10\x12\x20\xcc\x80\x22\xe8\xf3\x10\x06\x1a\x24\x94\x27\x01\x03\xa2\x2c\x20\x0e\x29\x21\xf3"
"\xf0\x2c\x20\x02\x2c\x21\x1f\xd0\xa0\x20\x34\x22\xcd\x23\xf4\xf2\x60\xc8\x2f\x01\xb3\x18\x2c\x20\x4c\x22\xd0\x28\xb9\x06\xf1\x2d"
"\x68\x28\xe9\xf2\x55\xba\xeb\xf0\xdd\xeb\xf0\xe9\xeb\xf0\x6f\xeb\xf0\x05\x92\xeb\xf0\x9e\xe7\xf4\x35\x31\x35\x31\xea\xf1\x29\x31"
"\xb5\xdd\xcc\x22\xf4\x00\x00\x01\x0b\xeb\xf0\x11\xff\x74\x6f\x6f\x6c\x2f\x74\x65\x6d\xdf\x70\x2f\x69\x6e\x2e\xee\xf1\x00\x14\xf9"
"\x0e\xea\xf1\x74\x31\x08\x74\x6f\x70\x6c\xef\x65\x76\x65\x6c\x74\x31\x07\x62\x75\xdf\x69\x6c\x74\x69\x6e\x74\x31\x04\x61\xb7\x72"
"\x67\x73\x0b\x00\x00\x05\x74\x31\x11\xff\x6f\x72\x64\x65\x72\x65\x64\x5f\x7e\x97\x30\x75\x6d\x65\x6e\x74\x73\x74\x31\xff\x0b\x62"
"\x6c\x6f\x63\x6b\x5f\x66\xaf\x69\x72\x73\x74\x74\x31\x0a\xbb\x33\x6e\xf3\x65\x78\xc5\x32\xba\x34\x63\x61\x74\x63\x7d\x68\xb6\x38"
"\x62\x72\x65\x61\x6b\x74\x31\xaf\x05\x63\x68\x61\x90\x33\x05\xc1\x36\x04\x7b\x6c\x61\x07\x44\x73\x74\x65\x70\x9b\x31\xd5\x0c\x9b"
"\x31\x0d\x9b\x31\x0e\xf5\x32\x72\x61\x77\x6e\x67\x65\x86\x32\x66\x6f\x72\x82\x30\x7d\x72\x74\x31\x09\x66\x69\x6c\x65\xbc\x30\x00"
"\x70\x30\xb2\x20"
);

}

namespace xpeg{

XTAL_BIND2(XpegOperator){
	Xemb((
		Element: xpeg::Element;
		elem: xpeg::elem;
		XpegOperator: xpeg::XpegOperator;

		more_Int: fun(left, n, kind){
			if(n==0){ return Element(Element::TYPE_MORE0, elem(left), null, kind); }
			else if(n==1){ return Element(Element::TYPE_MORE1, elem(left), null, kind); }
			else if(n==-1){ return Element(Element::TYPE_01, elem(left), null, kind); }

			if(n>0){ return xpeg::concat(left, more_Int(left, n-1, kind)); }
			else{ return xpeg::concat(more_Int(left, -1, kind), more_Int(left, n+1, kind)); }		
		}

		more_IntRange: fun(left, range, kind){
			if(range.begin()<=0){
				n: -(range.end()-1);
				return n < 0 ? more_Int(left, n, kind) : Element(Element::TYPE_EMPTY);
			}

			return xpeg::concat(left, more_IntRange(left, (range.begin()-1)..(range.end()-1), kind));
		}

		XpegOperator::op_div#Int: method(n){
			return more_Int(this, n, 1); 	
		}

		XpegOperator::op_div#IntRange: method(n){
			return more_IntRange(this, n, 1); 	
		}

		XpegOperator::op_mod#Int: method(n){
			return more_Int(this, n, 0); 	
		}

		XpegOperator::op_mod#IntRange: method(n){
			return more_IntRange(this, n, 0); 	
		}

		XpegOperator::op_mul#Int: method(n){
			return Element(Element::TYPE_GREED, more_Int(this, n, 0));
		}

		XpegOperator::op_mul#IntRange: method(n){
			return Element(Element::TYPE_GREED, more_IntRange(this, n, 0));
		}

		XpegOperator::op_or#XpegOperator: method(right){
			return xpeg::select(this, right);
		}

		XpegOperator::op_shr#XpegOperator: method(right){
			return xpeg::concat(this, right);
		}

		XpegOperator::op_com: method(){
			return ~xpeg::elem(this);
		}
	),
"\xbf\x78\x74\x61\x6c\x01\x01\xea\xf1\x03\xff\xea\x30\x01\x00\x07\x32\x00\x01\xa7\x00\x08\x2f\xeb\xf0\xfa\xf5\x09\x03\x00\x01\xda"
"\xfa\xf5\x0a\x03\x00\x02\x4b\x11\x00\x01\x35\xff\x03\x01\x00\x1e\xfe\x01\x02\x1d\xbf\x00\x00\x06\x00\x32\x2e\xf3\xf0\x2e\xff\x03"
"\x00\x00\x32\x02\x03\x00\x12\xff\x2e\x04\x00\x01\x07\x05\xfd\x34\xff\x03\x01\x04\x05\x01\x01\x04\x00\xef\x07\x05\xff\x34\x23\x00"
"\x02\x04\x3c\xff\x00\x01\x1b\x00\x76\x03\x01\x01\xa4\x2a\x0f\x3c\x01\x13\x41\x0f\x53\x09\x3d\x60\x00\x0b\x14\x56\x00\x63\x06\x2f"
"\x34\x09\x14\x7a\x0f\x53\x07\x27\x00\x77\x1f\x01\xfe\x66\x03\x37\x30\x02\xfc\xf0\x7f\x01\x02\x00\x15\x07\x02\xfd\xb7\x00\xfd\x03"
"\xbb\x00\x03\x07\x01\x0e\x06\xfe\xbf\x07\x08\x00\x07\x07\xff\xbe\x02\x03\xca\x54\x02\x02\x5a\x02\x45\xe0\x06\x38\x00\x03\x07\xff"
"\x04\xfd\x03\x05\x01\x0b\x05\x05\xff\x06\x07\x06\xff\x34\x02\x01\x03\xcb\x04\x03\xec\x07\x0d\xf7\x0f\x09\x12\x3c\x00\xf5\x00\x03"
"\x00\x03\x21\x00\x02\x00\xc0\x38\xff\x01\xfd\x00\x1d\x02\x03\x02\x00\xf9\x1f\x2c\x10\x67\x00\x61\x00\x06\x38\x00\xf7\xfd\x00\x1e"
"\xd2\x00\x01\x0e\xff\x00\xde\xe5\x00\x0b\xff\xff\x00\x66\x11\xff\x02\xf7\x03\x1d\x01\x30\x00\x0c\x01\x00\x03\x5f\x1b\x00\x06\x01"
"\x00\x66\x03\x1c\x34\x00\xff\x03\x07\x02\xfc\x07\x03\xff\x07\x53\x04\xfe\x54\x02\x95\x10\x16\x34\x09\x1f\x54\x02\xea\x52\x10\x01"
"\xe0\x08\xfc\xb7\x00\x04\x07\x05\xf7\xfc\x38\x08\x62\x10\x09\x03\x09\x01\xff\x0e\x07\x08\x09\x0a\x00\x38\x09\xbe\x75\x10\x0a\x03"
"\x0a\x01\x0e\xec\x10\x0b\xef\x00\x3f\x06\x00\xeb\x10\x07\x07\xfe\xcc\x44\x1f\x03\x00\x04\x2e\x1e\x01\x93\x10\x00\x1e\x76\xa2\x11"
"\x06\x02\xa9\x10\x03\x04\x01\xaf\x13\xfc\x50\x13\xe0\x00\x23\x4a\x00\x00\x22\x02\x2b\x08\x01\x1e\x24\x04\x26\x22\x04\x2c\x2f\x3e"
"\x22\xd5\x26\x44\x2b\x05\x26\x2a\x00\x34\x2f\x00\x29\xc2\x48\x27\x06\x53\x2a\x8d\x2d\x70\x21\xa1\x28\x07\x00\xb5\x31\x34\x09\x2e"
"\xec\x01\x06\x05\x28\x10\x03\x53\x07\x00\x08\x2f\x40\x24\x2f\x48\x27\x08\xda\x2f\xe1\x04\xed\x2f\xff\x28\x70\x21\x0e\x38\x09\x00"
"\x20\xf2\xe0\x05\x34\x59\x22\x4a\x19\x2e\x02\x00\x02\x2a\x44\x20\x35\x48\x27\x0a\x5a\x37\x15\x65\x3f\x77\x33\xdd\x38\x48\x27\x0b"
"\x00\x21\xe0\x05\x09\x06\x45\x02\xc5\x13\x0c\x11\x00\x50\x13\x44\x20\x39\x11\x01\x77\x00\x00\x3a\x5a\x00\x51\x00\x0d\xe7\xf4\xe1"
"\x02\x51\x20\xe6\xf5\xc0\x30\x7e\x20\x00\x00\x27\xb2\xeb\xf0\x0c\x24\x20\x39\x00\x01\x60\xeb\xf0\x17\x2c\x51\x20\x39\x00\x02\x28"
"\xeb\xf0\x20\xff\xf0\xf3\xf0\x2b\x02\x55\xeb\xf0\x24\x1e\x44\x82\xfe\x32\x1f\x43\x55\xaf\xeb\xf0\x2a\x1e\x44\xdc\xeb\xf0\x2c\x1e"
"\x43\x13\x03\x1c\x04\x01\x4e\x44\x5c\xeb\xf0\xfe\xf1\x51\x41\x15\x8b\xeb\xf0\x36\x4e\x44\xba\xeb\xf0\xd8\x30\xeb\xf0\x00\xf3\xf2"
"\xf6\x38\xe9\xf2\xcb\x30\xf6\xf0\xe7\xf4\xf3\xf0\xb8\x00\xca\xe9\xf2\x2d\x39\x00\x0f\x06\x41\x51\x41\x00\x0b\x95\x03\x09\x41\x66"
"\x39\x00\x1a\x12\x41\xa5\x42\x16\x16\xbf\x41\x02\x2e\xfd\x30\x21\x1e\x41\xf3\xf0\xe1\x41\xaa\x21\x41\x5b\xfd\x30\x25\xdd\x4c\x88"
"\xfd\x30\x28\xaa\xdd\x4c\xb5\xfd\x30\x2b\xdd\x4c\xe2\xfd\x30\x2d\x56\xdd\x4b\x03\x22\xfd\x30\x31\x2d\x5c\x62\xfd\x30\x55\x33\x2d"
"\x5c\x91\xfd\x30\x37\x2d\x5c\xc0\xfd\x30\xb0\x7d\x42\x83\x45\x80\x57\x7e\x45\x03\xe9\x1e\x41\x0b\xfe\xeb\xf0\x11\x74\x6f\x6f\x6c"
"\x2f\x74\x7f\x65\x6d\x70\x2f\x69\x6e\x2e\xee\xf1\xe7\x00\x3b\x0e\xea\xf1\xb9\x51\x08\x74\x6f\xbf\x70\x6c\x65\x76\x65\x6c\xb9\x51"
"\x07\x7f\x45\x6c\x65\x6d\x65\x6e\x74\xb9\x51\xf3\x04\x65\xd1\x50\xb9\x51\x0c\x58\x70\x65\xff\x67\x4f\x70\x65\x72\x61\x74\x6f\xfd"
"\x72\xbe\x52\x6d\x6f\x72\x65\x5f\x49\xfa\xd5\x53\x0d\xf6\x55\x52\x61\x6e\x67\x65\x4a\xd7\x52\x78\xe6\x50\x02\xd8\x51\x19\x61\x05"
"\x19\x61\x75\x06\x19\x61\x07\xd7\x52\x6c\x65\x66\xd6\x52\x7b\x01\x6e\xd7\x52\x6b\x69\x6e\x64\x19\x61\xd5\x0a\x19\x61\x0b\x19\x61"
"\x0c\xb9\x51\x0a\x54\xff\x59\x50\x45\x5f\x4d\x4f\x52\x45\xa5\x30\x54\x6b\x31\xcb\x52\x59\x62\x30\x71\x62\x06\xbf\x63\x6f\x6e\x63"
"\x61\x74\x19\x61\x08\x8c\x45\x62\xb9\x51\x05\x72\x0c\x61\x4f\x62\x45\x66\x11\xbe\x4f\x66\x05\x62\x65\x67\x69\x3b\x62\x03\xf7\x65"
"\x6e\x64\x54\x67\x45\x4d\x50\x54\xf5\x59\x4a\x66\x0b\x7e\x62\x6f\x70\x5f\x64\x23\x69\x76\xbb\x62\xfb\x50\xd2\x6b\x08\x08\x65\xd2"
"\x6f\xc3\x6d\x6f\x44\x62\xd6\x63\x06\x7b\x58\x63\x47\x52\xb7\x45\x45\x44\x10\x76\x75\x6c\x06\x7b\x05\xaf\x72\x69\x67\x68\x88\x62"
"\x1b\x7e\x62\x73\x6a\xdc\x50\x63\xd6\x52\x05\xe1\x60\x6f\x72\x5d\x72\xcc\x5d\x77\xe1\x60\x73\x68\xf0\x52\xe0\x61\x63\x6f\xfe\xdf"
"\x52\x09\x66\x69\x6c\x65\x6c\x6f\x1d\x63\xb5\x50\x01\x03\x03"
);
}

XTAL_BIND2(Element){
	Xemb((
		xpeg::Element::set_body: method(term){ 
			if(this.type==xpeg::Element::TYPE_DECL){
				this.param1 = xpeg::elem(term);
			}
		}
	),
"\xbf\x78\x74\x61\x6c\x01\x01\xe9\xf2\x5a\xff\x30\x01\x00\x02\x32\x00\x01\x00\xf7\x03\x4b\x01\xff\xf0\x42\x06\x02\x38\x7f\x01\x02"
"\x00\x06\x03\x30\x04\xfc\xf0\xff\x03\x04\x00\x03\x32\x02\x03\x00\xff\x07\x1e\x01\x02\x03\x1d\x00\x00\x7f\x06\x00\x1f\x06\x00\x30"
"\x03\xfc\xf0\x7e\x1b\x00\x09\x07\x03\xff\x34\x01\x20\x00\xff\x01\x39\x00\x00\x08\x01\x3c\x00\xff\x00\x4a\x00\x00\x0a\x00\x00\x01"
"\xff\x30\x00\x00\x0b\x3c\x00\x01\x51\x8b\x00\x03\xe7\xf4\x02\xff\xf0\xe6\xf5\x5d\x05\x09\x02\xeb\xf0\x04\xff\xf0\x04\x01\x57\x0f"
"\x5c\x00\xeb\xf0\x55\x05\x7c\xf3\xf0\x79\x05\x0f\x05\x00\x00\x05\x76\x01\xb0\x9d\x02\xaf\x01\x85\x08\x9a\x03\x00\x59\x76\x01\x0b"
"\xfe\xeb\xf0\x11\x74\x6f\x6f\x6c\x2f\x74\x7f\x65\x6d\x70\x2f\x69\x6e\x2e\xee\xf1\xe7\x00\x0c\x0e\xea\xf1\xe9\x01\x08\x74\x6f\xbf"
"\x70\x6c\x65\x76\x65\x6c\xe9\x01\x04\xef\x78\x70\x65\x67\xe9\x01\x07\x45\x6c\xdf\x65\x6d\x65\x6e\x74\xfb\x02\x74\x65\xeb\x72\x6d"
"\x90\x01\x06\x10\x13\x79\x70\x65\xfe\xe9\x01\x09\x54\x59\x50\x45\x5f\x44\xf7\x45\x43\x4c\xe9\x01\x0a\x73\x65\x74\x7f\x5f\x70\x61"
"\x72\x61\x6d\x31\xfb\x02\xf1\x65\x0a\x10\xee\x02\x3a\x11\x62\x6f\x64\x79\xfe\x27\x12\x66\x69\x6c\x65\x6c\x6f\x63\x0e\xe5\x00\x01"
"\x03\x03"
);
}

XTAL_BIND2(Xpeg){
	Xemb((
		elem: xpeg::elem;
		Element: xpeg::Element;

		xpeg::set: fun(str){
			chset: Set();
			str.each{
				chset[it] = true;
			}
			return Element(Element::TYPE_CH_SET, chset);
		}

		xpeg::call: fun(f){
			return Element(Element::TYPE_CALL, f);
		}

		xpeg::select: fun(left, right){
			eleft: elem(left);
			eright: elem(right);

			if((eleft.type==Element::TYPE_EQL || eleft.type==Element::TYPE_CH_SET) && 
				(eright.type==Element::TYPE_EQL || eright.type==Element::TYPE_CH_SET)){

				chset: Set();

				if(eleft.type==Element::TYPE_EQL){
					chset[eleft.param1] = true;
				}

				if(eleft.type==Element::TYPE_CH_SET){
					eleft.param1{
						chset[it] = true;
					}
				}

				if(eright.type==Element::TYPE_EQL){
					chset[eright.param1] = true;
				}

				if(eright.type==Element::TYPE_CH_SET){
					eright.param1{
						chset[it] = true;
					}
				}
				return Element(Element::TYPE_CH_SET, chset);
			}

			return Element(Element::TYPE_OR, eleft, eright); 
		}

		xpeg::concat: fun(left, right){ 
			eleft: elem(left);
			eright: elem(right);

			if(eleft.type==Element::TYPE_CONCAT){
				return Element(Element::TYPE_CONCAT, eleft.param1, Element(Element::TYPE_CONCAT, eleft.param2, eright));
			}

			return Element(Element::TYPE_CONCAT, eleft, eright); 
		}

		xpeg::lookahead: fun(left){
			return Element(Element::TYPE_LOOKAHEAD, elem(left));
		}

		xpeg::lookbehind: fun(left, back){
			return Element(Element::TYPE_LOOKBEHIND, elem(left), back);
		}

		xpeg::cap: fun(...arg){
			named: arg.named_arguments[];

			if(!named.empty){ 
				return Element(Element::TYPE_CAP, elem(named[0][1]), named[0][0]);
			}
			
			ordered: arg.ordered_arguments[];
			if(ordered.length==2){ 
				return Element(Element::TYPE_CAP, elem(ordered[1]), ordered[0]);
			}

			return null;
		}

		xpeg::node: fun(...arg){
			named: arg.named_arguments[];

			if(!named.empty){ 
				return Element(Element::TYPE_NODE, elem(named[0][1]), named[0][0]);
			}
			
			ordered: arg.ordered_arguments[];
			if(ordered.length==1){ 
				return Element(Element::TYPE_CAP, elem(ordered[0]));
			}

			if(ordered.length==2){ 
				return Element(Element::TYPE_CAP, elem(ordered[1]), ordered[0]);
			}

			return null;
		}

		xpeg::splice_node: fun(num, ...arg){
			named: arg.named_arguments[];
			if(!named.empty){
				return Element(Element::TYPE_NODE, elem(named[0][1]), named[0][0], num);
			}

			ordered: arg.ordered_arguments[];

			if(ordered.length==1){
				return Element(Element::TYPE_NODE, elem(ordered[0]), null, num);
			}

			if(ordered.length==2){ 
				return Element(Element::TYPE_NODE, elem(ordered[1]), ordered[0], num);
			}
		
			return null;
		}

		xpeg::leaf: fun(left){
			return Element(Element::TYPE_LEAF, elem(left));
		}

		xpeg::leafs: fun(left){
			return Element(Element::TYPE_LEAF, elem(left), null, 1);
		}

		xpeg::back_ref: fun(n){
			return Element(Element::TYPE_BACKREF, n);
		}

		xpeg::decl: fun(){
			return Element(Element::TYPE_DECL);
		}

		xpeg::bound: fun(body, sep){
			return lookbehind(sep, 1) >> body >> lookahead(sep);
		}

		xpeg::error: fun(fn){
			return Element(Element::TYPE_ERROR, fn);
		}

		xpeg::pred: fun(e){
			return Element(Element::TYPE_PRED, e);
		}
				
		xpeg::any: Element(Element::TYPE_ANY);
		xpeg::bos: Element(Element::TYPE_BOS);
		xpeg::eos: Element(Element::TYPE_EOS);
		xpeg::bol: Element(Element::TYPE_BOL);
		xpeg::eol: Element(Element::TYPE_EOL);
		xpeg::empty: Element(Element::TYPE_EMPTY);

		xpeg::degit: elem("0".."9");
		xpeg::lalpha: elem("a".."z");
		xpeg::ualpha: elem("A".."Z");
		xpeg::alpha: xpeg::lalpha | xpeg::ualpha;
		xpeg::word: xpeg::alpha | xpeg::degit | "_";

		//ElementPtr ascii = elem(xnew<ChRange>(intern(Xs("\x01")), intern(Xs("\xfe"))));

),
"\xbf\x78\x74\x61\x6c\x01\x01\xea\xf1\x0a\xff\x09\x30\x01\x00\x04\x32\x00\x01\xa7\x00\x05\x2f\xeb\xf0\xfa\xf5\x06\x03\x00\x01\xbf"
"\x30\x00\x00\x04\x4b\x01\xff\xf0\x9d\xee\x14\x00\x09\x34\xfc\x19\x01\x38\x01\xfb\xff\x00\x0a\x02\x36\x00\x02\x01\x00\xff\x0b\x00"
"\x02\x00\x07\xfd\x00\x07\xff\xfe\x01\x4d\x00\x01\x1d\xfd\x00\xff\x06\x00\x26\x01\x00\x03\x1a\xfc\x77\xfe\x00\x01\x2e\x00\xfd\x00"
"\x0c\xff\xf0\xfe\x37\x03\x1d\xfd\xff\xe9\x00\x09\x1b\xff\xff\xe3\x4f\x00\x33\x4e\x4d\x00\xff\x02\x26\x00\x07\xff\x00\x07\x01\xff"
"\xff\x37\x00\x01\xfd\x00\x0d\x00\xee\xf2\xf0\x10\x1d\x00\x52\x00\x06\x07\x00\xff\xff\x25\x00\x51\x4e\x37\x00\x00\x77\xfd\x00\x0e"
"\xea\xf1\x10\x50\x2e\x19\x00\xff\x2e\x03\x00\x01\x32\x02\x03\x00\xdf\x0f\x07\x03\xfc\x34\x7b\x00\x02\x02\x7f\x3c\x00\x01\x3c\x00"
"\x00\x4a\x95\x00\xee\x11\x07\x02\x00\x22\x99\x09\x13\x07\x03\xf5\xff\xa9\x0c\x14\x11\x07\x03\x02\x64\x2e\xbe\xeb\xf0\x07\x01\xf8"
"\x34\xfa\x19\x00\x01\xee\xf3\x03\xf9\x34\xfb\xfc\x01\x38\x02\xfa\xdf\x00\x19\x03\x2e\x04\x9f\x00\x03\x04\x7f\x00\x1a\x1e\x02\x03"
"\x04\x1d\x0d\x00\x3b\x00\x0c\x46\x00\x1b\x00\x06\xc1\x00\x80\x00\x97\x28\x00\x06\x0d\x1b\x0f\x1c\x1f\x2e\x11\x06\x1f\x00\x50\x38"
"\x02\xfb\x10\x1f\x22\x1f\x34\x10\x98\x5f\x19\x43\x1f\x55\x13\x01\x8b\x1e\x09\x0f\x10\x02\xbe\x9d\x05\x1a\x1e\x01\x02\x03\x57\x12"
"\x14\xff\x38\x00\xfa\x00\x1b\x01\x01\x01\xae\x48\x00\x00\x01\x02\xb7\x1b\x0f\xc6\x16\x77\x8a\xb7\x11\x1b\x2d\x0f\x03\x40\x0f\x52"
"\x0f\x64\x05\x04\x40\x6d\x0f\x7f\x0f\x91\x05\x28\x01\xbb\x1f\xcd\x12\xfb\xd3\x1a\x10\x6a\x29\xec\x1a\x83\x20\xfc\x1f\x05\x0f\x2f"
"\x21\x2f\x64\x05\xc1\x06\x3c\x2f\x4e\x2f\x91\x0f\xa3\x0c\x19\x39\x1c\x07\x5f\x03\xfa\x07\x04\xfb\xa9\x02\x03\xaf\x06\xdc\x00\x30"
"\x13\x05\x04\x00\x90\xf3\x03\xfc\x34\xdd\xfe\xfc\x07\xfd\x34\xff\x09\x12\x01\xfe\xea\x6b\x28\x22\xc6\x16\x3e\x19\x39\x22\x38\x03"
"\xbf\xfe\x00\x1b\x04\x2e\x05\x1b\x30\x07\xfc\x1f\x30\x05\x30\x22\x38\x07\xfe\x00\x23\xff\x08\x07\x08\xff\x34\x04\x01\x05\xf3\x06"
"\x03\x45\x36\x95\x3a\x07\x03\xfe\x07\xe9\x04\xd5\x03\x4a\x37\x24\x11\x07\x05\x00\x2c\xfa\x19\x39\x27\x63\x10\x00\x07\x05\xff\x34"
"\x5f\x03\x01\x04\x05\x01\xa9\x0c\x28\x11\x07\x57\x06\x00\x2f\x19\x39\x2d\x0a\x43\xfe\x11\x43\x78\xdd\x3f\xf3\x00\x13\x05\x07\x00"
"\xb6\x38\x0f\x30\xff\x31\x01\x38\xfe\x00\x00\x32\x01\xbf\x38\x00\xfe\x00\x33\x01\x00\x30\x46\xeb\x00\x06\x19\x39\x34\x0a\x41\x03"
"\x07\x00\xff\x19\x06\xfe\x07\x08\x03\x07\x01\xdf\x19\x05\x06\x07\x08\x11\x43\x03\x06\xbf\x00\x19\x05\xfe\x06\x07\xad\x41\x04\x78"
"\xa3\x40\x45\x36\x6e\x41\x35\x01\x38\xff\x76\x42\xff\x01\xff\x00\x36\x02\x03\x02\x02\x2a\xc6\x16\x36\x86\x4f\x06\xa1\x40\xff\xbb"
"\x40\xa8\x43\x1d\x05\xb7\x40\xff\x05\x06\x45\x36\xf3\xf0\xaf\x06\x9c\x0d\x30\x13\x05\x08\x00\xf1\x6e\x4f\x80\x4f\x3a\x50\x93\x4f"
"\xa5\x4f\xb7\x4f\xc9\x4e\x01\xc6\x16\x2e\xe5\x4f\x00\x6f\x51\xfb\x46\xa9\x06\xd2\x4f\xe4\x4f\xf6\x4f\x08\x5f\xb1\x04\x9d\x3b\x11"
"\x07\x09\x00\xfd\x2f\x5f\x00\x30\x49\xb0\x45\x5f\x57\x5f\x69\x5f\x60\x60\x07\x05\xa8\x03\x04\x64\x84\x5f\x96\x5c\x34\x43\x6f\xb8"
"\x5a\x01\x04\x0d\x40\x04\x7c\x68\xcf\x5e\x39\xa5\x6f\xf3\x5f\x05\x60\x7a\x69\x15\x59\x95\x40\x11\x07\x0a\xfb\x3b\x43\x0a\x4f\xae"
"\x07\x44\x8e\x11\x07\x0b\x00\x32\x33\x7f\x45\x75\xc4\x60\x03\xa8\x15\x44\x82\x61\xb2\x03\x47\x11\x07\x0c\xc4\x0b\x4a\xba\xd3\x0f"
"\x4b\x11\x07\x0d\x00\x1f\x19\x39\x4c\xe8\xa9\x02\xb1\x00\xb1\x04\x4d\x11\x07\x0e\x00\x35\xcf\x30\x03\x00\x2e\x4e\x40\x87\x71\x02"
"\x01\xff\x03\x04\x02\x17\x01\x02\xfe\x03\x65\x00\xfe\x70\x28\x4e\x41\x09\x81\x01\x17\xdb\x10\x55\x03\x17\x57\x52\x11\x07\x0f\xc4"
"\x0b\x55\xb4\x7f\x55\x56\x11\x07\x10\xc4\x0b\x59\x4b\x8f\x5a\x11\x04\xb3\x2e\x02\x1b\x30\x64\x14\x5b\x34\x47\x31\x01\x5a\xb5\x00"
"\x5c\x8b\x8f\x00\x5d\x9f\x86\x5e\xa9\x8f\x6b\x00\x5f\x9f\x86\x60\xc7\x8f\x00\x61\x9f\x86\xad\x62\xe5\x8f\x00\x63\x9f\x86\x64\x03"
"\x9f\x00\xb5\x65\x9f\x86\x33\x21\x97\x00\x02\x64\x10\x02\x3f\x05\x00\x02\x3f\x03\x00\x7a\x50\x9f\x86\x55\x66\x3f\x9b\x03\x4e\x90"
"\x04\x52\x9c\x67\x3f\x9b\x95\x05\x4e\x90\x06\x52\x9c\x68\x11\x04\xfe\x70\x04\xce\xa1\x01\x67\x30\x04\xfc\xf0\x68\x10\x68\x14\xca"
"\xc7\x10\x04\xb4\x01\x69\xa8\x95\xb9\x94\x69\x30\x7e\x72\x90\x32\x04\x05\x00\x66\x14\x95\x10\xae\x4f\x90\x03\x00\x07\xc1\x96\x6a"
"\x11\x03\x6b\x2e\xaf\x00\x51\x00\x12\xe7\xf4\x02\x2b\x50\xe6\xf5\x19\x02\x2f\x70\x47\x90\x00\x1e\xf4\x01\xf9\x30\xf3\xf1\xa5\xc6"
"\xeb\xf0\x11\xff\xf0\xf3\xf1\xf3\xeb\xf0\x15\xa4\x2b\x50\x47\x90\x03\x02\x90\x1f\xa0\x04\x3f\xa2\xfd\x5a\xeb\xf0\x25\x31\xa3\x04"
"\x34\xeb\xf0\x29\x34\x00\xb6\x47\x90\x04\x6e\xeb\xf0\x2f\x00\x1e\x30\x00\x5a\x01\x03\x38\x6d\xa3\x06\x2b\xeb\xf0\x3c\x49\xa3\xad"
"\x07\x3e\x90\x00\x41\x31\xa3\x07\xf7\x90\x00\x55\x45\x91\xa4\xa7\xeb\xf0\x48\x91\xa4\xd4\xeb\xf0\xb9\x4c\xe8\xf3\xb6\x30\x00\x00"
"\x4e\x61\xa3\x08\xb5\x3e\xeb\xf0\x53\x31\xa3\x08\x6b\xeb\xf0\x57\x50\x31\xa2\xf3\xf2\x15\xa8\xe9\xf2\x11\xea\xf1\x03\xe7\xf4\x14"
"\xd0\xa1\xdd\xa4\x24\xf8\xa0\x08\x25\xa1\x70\xa1\x11\x00\x0a\xf3\xf1\xcc\xf8\xa0\x12\x31\xa1\xf3\xf0\x28\xb1\xf3\xf1\x65\xf9\xf8"
"\xa0\x17\x3d\xa1\x00\xb2\x00\x02\x40\xa1\xc5\x68\xf8\xa0\x20\x49\xa1\x58\xa1\x40\xb3\x04\x03\x5a\xf8\xa0\x26\x24\xbb\x04\x3a\xf8"
"\xa0\x2b\x61\xa1\xf8\xf3\xf0\x47\x91\x64\xa1\x74\x03\x02\x00\x30\x58\x6d\xa1\xf3\xf0\xf8\xa4\x05\x35\x84\xb0\x39\x88\xbb\xcb\x06"
"\x31\x84\xb0\x3e\x4c\xb7\xf2\xf1\x07\x39\x5a\xf8\xa0\x42\x24\xbb\x07\x70\xf8\xa0\x46\xc4\xbc\x15\xad\xf8\xa0\x49\xc4\xbc\xda\xf8"
"\xa0\xb4\xa2\xde\xa5\x6a\xc5\xa0\x04\xf8\xa0\x50\x74\xbb\x08\x44\xf8\xa0\xad\x54\x24\xbb\x08\x71\xf8\xa0\x58\x24\xba\x07\x2a\xdf"
"\xfc\x70\xeb\xf0\x93\xeb\xf0\x9f\xe7\xf4\x5d\xc1\x26\x5d\xc0\x02\x3f\x48\x90\x02\x90\x02\x68\xa1\x09\xa1\x54\x75\xc1\x75\xc1\xf0"
"\x52\x60\x13\x52\x60\x1f\xe8\xf3\x6a\x8c\xc2\x13\x27\xa1\x0a\x03\xb1\x01\x0b\x2d\xa1\xff\x74\x6f\x6f\x6c\x2f\x74\x65\x6d\xdf\x70"
"\x2f\x69\x6e\x2e\xee\xf1\x00\x6c\xfc\x12\x32\x12\x31\x08\x74\x6f\x70\x6c\x65\xfb\x76\x65\xbf\xc2\x04\x65\x6c\x65\x6d\x76\x12\x31"
"\x07\x45\xd8\xc0\x65\x6e\x74\xd2\xc2\xaf\x78\x70\x65\x67\x1c\xa1\x04\x1c\xa1\x05\x5e\x12\x31\x03\x73\x74\x72\x1c\xa1\x07\xfa\xc2"
"\x7b\x53\x65\xe6\xc3\x65\x61\x63\x68\x12\x31\xff\x0b\x62\x6c\x6f\x63\x6b\x5f\x66\xd7\x69\x72\x73\xe6\xc2\x0a\x1d\xd3\x6e\x65\xb9"
"\x78\xe6\xc2\x1c\xd4\x63\x61\x74\x16\xda\x62\xef\x72\x65\x61\x6b\x18\xd2\x54\x59\x50\xff\x45\x5f\x43\x48\x5f\x53\x45\x54\xac\xfa"
"\xc3\x0d\xd3\x01\x66\x1c\xa1\x10\x12\x31\x09\xee\x5c\xd3\x41\x4c\x4c\xd2\xc2\x63\x61\x6c\xee\xd1\xc3\x6c\x65\x66\xe6\xc2\x05\x72"
"\x69\x57\x67\x68\x74\x1c\xa1\x13\x1c\xa1\x14\xd2\xc2\xcf\x74\x79\x70\x65\xc5\xc2\x5c\xd2\x45\x51\xfe\x87\xd2\x06\x70\x61\x72\x61"
"\x6d\x31\xac\xdb\xc2\x5c\xd2\x4f\x52\xc4\xd2\x73\xd7\xc0\x63\x78\xa3\xd8\xa4\xdb\x5b\xd4\x4f\x4e\x43\x41\x66\xd2\x3a\xc8\xd3\x32"
"\xc4\xd2\x63\x6f\x6e\x42\xd0\xa4\xd6\xf5\x13\x12\x31\x0e\x5c\xd2\x4c\x4f\x4f\x4b\xdf\x41\x48\x45\x41\x44\x7a\xd2\x6c\x6f\x7f\x6f"
"\x6b\x61\x68\x65\x61\x64\x25\xe6\x5f\x04\x62\x61\x63\x6b\xa4\xd6\x1f\x12\x31\x7d\x0f\x2f\xe6\x42\x45\x48\x49\x4e\x3c\xe2\xfd\x0a"
"\x42\xe1\x62\x65\x68\x69\x6e\x64\xd6\xfa\xc2\x61\x72\xef\xc2\x22\x63\xe2\x6e\x61\xaf\x6d\x65\x64\x5f\x8b\xe0\x75\xe3\xc1\x73\xbe"
"\x18\xd2\x6f\x70\x5f\x74\x6f\x9d\xe0\x72\x93\x61\x79\x9a\xd2\xb3\xc0\x74\xb6\xe2\xbb\xd3\x43\xfb\x41\x50\x12\x31\x11\x6f\x72\x64"
"\x65\xfd\x72\x9b\xed\x06\x6c\x65\x6e\x67\x74\x1e\x17\xd2\x03\x63\x61\x70\x8e\xe2\x8e\xe6\x7e\xd3\xef\x4e\x4f\x44\x45\xd2\xc2\x6e"
"\x6f\x64\x5e\xb6\xd2\x03\x6e\x75\x6d\xf7\xe6\x2c\x8e\xe6\xff\x0b\x73\x70\x6c\x69\x63\x65\x5f\x78\x14\xf1\x20\xeb\x7e\xd3\x4c\x45"
"\x41\x46\x91\xd4\xc9\x61\x74\xd2\x24\xe7\x05\x5c\xf1\xa6\xe2\x01\x6e\xf4\x1c\xa1\xce\xd2\x0c\x5c\xd2\x42\x41\x43\x4b\xeb\x52\x45"
"\x56\xf2\x08\x55\xe1\x5f\x72\x65\xdd\x66\x7a\xd7\x44\x45\x43\x87\xd3\x64\x65\x1d\x63\xd1\xc3\x62\x6f\x64\xb6\xe2\x6b\xd0\xf6\xe2"
"\x75\x36\x1c\xa1\x37\x9a\xd2\x62\x6f\x75\x84\xe3\xcb\x02\x66\x79\xf2\x39\x28\xd2\xbc\xd3\x52\x52\x7e\xd9\xd3\x05\x65\x72\x72\x6f"
"\x72\x6f\xd2\xba\x3e\xf2\x3c\x7a\xd7\x50\x52\x45\x3c\xe2\x04\xb9\x70\xd7\xe0\xb7\xd7\x41\x4e\x59\x86\xe3\x6e\x6e\xc0\xe8\x42\x4f"
"\x53\xfa\xc2\x62\x6f\xa6\xe2\x34\xbb\xd4\x40\x04\x65\x48\x09\x42\x4f\x87\xd2\x46\x00\xc8\xbf\xc2\x4e\x05\x6b\x03\x65\x72\x03\xe9"
"\xf4\x4d\x50\x7d\x54\x2c\x02\x05\x64\x65\x67\x69\xe6\xc2\x7f\x06\x6c\x61\x6c\x70\x68\x61\xc4\xd2\x35\x75\xa8\x06\x05\xa8\x06\x04"
"\x77\xd3\xe0\x7a\xd2\xcf\x66\x69\x6c\x65\x1e\xd0\xbc\xc0\x08\x03\xd2\x6f\xd2\x30\x6f\xd2\xe4\xf2\x01\xac\x02\x01\x7a\x6a\x6f\xd2"
"\x41\x6f\xd2\x5a\x6f\xd2\x5f\x03"
);

}

}

//*/

}
